["\" input are two strings a and b consisting only of 1s and 0s. perform binary xor on these inputs and return result also as a string. > > > string _ xor ('010 ','110')'100'\" \" \" def get _ row ( lst, x"]
["def order _ by _ points ( nums ) : \" \" \" write a function which sorts the given list of integers in ascending order according to the sum of their digits. note : if there are several items with similar sum of their digits, order them based on their index in original list. for example : > >"]
[", and your task is to count the number of boredoms. a boredom is a sentence that starts with the word \" i \". sentences are delimited by '. ', '?'or '! '. for example : > > > is _ bored ( \" hello world \" ) 0 > > >"]
["2, 3 ) 5 > > > add ( 5, 7 ) 12 \" \" \" def prime _ length ( string ) : \" \" \" write a function that takes a string and returns true if the string length is a prime number or false otherwise examples prime _ length ('hello') = = true prime _"]
["('' ) 0 > > > strlen ('abc') 3 \" \" \" def car _ race _ collision ( n : int ) : \" \" \" imagine a road that's a perfectly straight infinitely long line. n cars are driving left to right ; simultaneously, a different set of n cars"]
["##latz ( 5 ) returns [ 1, 5 ] # the collatz sequence for 5 is [ 5, 16, 8, 4, 2, 1 ], so the odd numbers are only 1, and 5. \" \" \" def even _ odd _ palindrome ( n ) : \" \" \""]
["= \" enam \" find _ max ( [ \" aaaaaaa \", \" bb \", \" cc \" ] ) = = \" \" aaaaaaa \" \" \" \" def monotonic ( l : list ) : \" \" \" return true is list elements are monotonically increasing or decreasing. > > >"]
["be equal to the product of all factors > > > factorize ( 8 ) [ 2, 2, 2 ] > > > factorize ( 25 ) [ 5, 5 ] > > > factorize ( 70 ) [ 2, 5, 7 ] \" \" \" def rounded _ avg ( n, m )"]
["n is a prime number and should return the value of y otherwise. examples : for x _ or _ y ( 7, 34, 12 ) = = 34 for x _ or _ y ( 15, 8, 5 ) = = 5 \" \" \" def solution ( lst ) : \" \" \" given a non"]
[", - 2, - 3 ] ) = = - 6 \" \" \" def encrypt ( s ) : \" \" \" create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. the alphabet should be rotated in a manner such"]
["##s ). > > > modp ( 3, 5 ) 3 > > > modp ( 1101, 101 ) 2 > > > modp ( 0, 101 ) 1 > > > modp ( 3, 11 ) 8 > > > modp ( 100, 101 ) 1 \" \" \" def match"]
["function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. the function should return an empty tuple if planet1 or planet2 are not correct planet names. examples bf ( \" jupiter \", \" neptune \""]
["##fg') returns 0 count _ upper ('dbbe') returns 0 \" \" \" def count _ up _ to ( n ) : \" \" \" implement a function that takes an non - negative integer and returns an array of the first n integers that are prime numbers and less than n. for example :"]
["\" \" \" write a function that takes an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits of a number are odd ( 1, 3, 5, 7, 9 ). for example : specialfilter ( [ 15, - 73,"]
["\" \" \" \" given an array representing a branch of a tree that has non - negative integer nodes your task is to pluck one of the nodes and return it. the plucked node should be the node with the smallest even value. if multiple nodes with the same smallest even value are found return the node that has smallest"]
["the level ( i + 1 ). examples : > > > make _ a _ pile ( 3 ) [ 3, 5, 7 ] \" \" \" def is _ sorted ( lst ) :'''given a list of numbers, return whether or not they are sorted in ascending order. if list has more"]
["vowels. > > > remove _ vowels ('' )'' > > > remove _ vowels ( \" abcdef \\ nghijklm \" )'bcdf \\ nghjklm'> > > remove _ vowels ('abcdef')'bcdf'> > > remove _ vowels"]
["\" \" task we are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome. a string is called palindrome if it reads the same backward as forward. you should return a tuple"]
["[UNK] false is _ sorted ( [ 1, 2, 3, 4, 5, 6 ] ) [UNK] true is _ sorted ( [ 1, 2, 3, 4, 5, 6, 7 ] ) [UNK] true is _ sorted ( [ 1, 3, 2, 4, 5, 6, 7 ] )"]
[", 0, - 2 ] ) - > [ 4, 4, 1, 0, 0, 6 ] \" \" \" def is _ simple _ power ( x, n ) : \" \" \" your task is to write a function that returns true if a number x is a simple power of n and false in other"]
["that l'is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted. > > > sort _ third ( [ 1, 2"]
["##0db \" \" \" \" def minpath ( grid, k ) : \" \" \" given a grid with n rows and n columns ( n > = 2 ) and a positive integer k, each cell of the grid contains a value. every integer in the range [ 1, n * n ] inclusive appears exactly once"]
["', { }, [ ] ] ) [ 1, 2, 3 ] \" \" \" def generate _ integers ( a, b ) : \" \" \" given two positive integers a and b, return the even digits between a and b, in ascending order. for example : generate _ integers ( 2, 8 )"]
[") = > 131 digitsum ( \" abccd \" ) = > 67 digitsum ( \" helloe \" ) = > 69 digitsum ( \" woarbld \" ) = > 131 digitsum ( \" aaaaaxa \" ) = > 153 \" \" \" def fib4 ( n : int ) :"]
[", 5 ] ) = > [ 0, 1, 2, 3, 4, 5 ] * sort _ array ( [ 2, 4, 3, 0, 1, 5, 6 ] ) = > [ 6, 5, 4, 3, 2, 1, 0 ] \" \" \" def strongest _ extension"]
["be equal to the product of all factors > > > factorize ( 8 ) [ 2, 2, 2 ] > > > factorize ( 25 ) [ 5, 5 ] > > > factorize ( 70 ) [ 2, 5, 7 ] \" \" \" def rounded _ avg ( n, m )"]
["\", \" eeff \" ) = > false cycpattern _ check ( \" himenss \", \" simen \" ) = > true \" \" \" def circular _ shift ( x, shift ) : \" \" \" circular shift the digits of the integer x, shift the digits right by shift and return"]
["\" def sort _ array ( arr ) : \" \" \" in this kata, you have to sort an array of non - negative integers according to number of ones in their binary representation in ascending order. for similar number of ones, sort based on decimal value. it must be implemented like this : > > > sort"]
["algebra operations, and the second list is a list of integers. use the two given lists to build the algebric expression and return the evaluation of this expression. the basic algebra operations : addition ( + ) subtraction ( - ) multiplication ( * ) floor division ( / / ) exponentiation ( *"]
["saturn \" )'''def anti _ shuffle ( s ) : \" \" \" write a function that takes a string and returns an ordered version of it. ordered version of string, is a string where all words ( separated by space ) are replaced by a new word where all the characters arranged in ascending order based on"]
[", 3, 4, 5, 1 ], [ 1, 2, 3, 4, 2, - 2 ] ) - > [ 0, 0, 0, 0, 3, 3 ] compare ( [ 0, 5, 0, 0, 0, 4 ], [ 4, 1, 1, 0"]
["special _ factorial ( n ) : \" \" \" the brazilian factorial is defined as : brazilian _ factorial ( n ) = n! * ( n - 1 )! * ( n - 2 )! *... * 1! where n > 0 for example : > > > special _ factorial"]
[": \" \" \" given a string, find out how many distinct characters ( regardless of case ) does it consist of > > > count _ distinct _ characters ('xyzxyz') 3 > > > count _ distinct _ characters ('jerry') 4 \" \" \" def solve ( s ) :"]
["if no such a value exist, return - 1. examples : search ( [ 4, 1, 2, 2, 3, 1 ] ) = = 2 search ( [ 1, 2, 2, 3, 3, 3, 4, 4, 4 ] ) = = 3 search ( [ 5, 5,"]
["_ a _ letter ( \" \" ) [UNK] false'''def common ( l1 : list, l2 : list ) : \" \" \" return sorted unique common elements for two lists. > > > common ( [ 1, 4, 3, 34, 653, 2, 5 ], [ 5,"]
["hello \", \" ell \" ) = > true cycpattern _ check ( \" whassup \", \" psus \" ) = > false cycpattern _ check ( \" abab \", \" baa \" ) = > true cycpattern _ check ( \" efef"]
["- empty list of integers, return the sum of all of the odd elements that are in even positions. examples solution ( [ 5, 8, 7, 1 ] ) = = > 12 solution ( [ 3, 3, 3, 3, 3 ] ) = = > 9 solution ( [ 30, 13, 24"]
["( 5 ) 15 > > > sum _ to _ n ( 10 ) 55 > > > sum _ to _ n ( 1 ) 1 \" \" \" def get _ closest _ vowel ( word ) : \" \" \" you are given a word. your task is to find the closest vowel that stands between two consonants from"]
["' ) false > > > same _ chars ('abcd ','dddddddabce') false > > > same _ chars ('eabcdzzzz ','dddzzzzzzzddddabc') false \" \" \" def solve ( n ) :"]
["* ) example : operator ['+ ','* ','-'] array = [ 2, 3, 4, 5 ] result = 2 + 3 * 4 - 5 = > result = 9 note : the length of operator list is equal to the length of operand list minus one. operand"]
["is a pair of integers. for example, interval = ( start, end ) = ( 1, 2 ). the given intervals are closed which means that the interval ( start, end ) includes both start and end. for each given interval, it is assumed that its start is less or equal its end. your task"]
["node. value \" \" \" def sum _ squares ( lst ) : \" \" \" \" this function will take a list of integers. for all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4"]
["##r ) - > int : \" \" \" find how many times a given substring can be found in the original string. count overlaping cases. > > > how _ many _ times ('','a') 0 > > > how _ many _ times ('aaa ','a '"]
["> prime _ fib ( 2 ) 3 > > > prime _ fib ( 3 ) 5 > > > prime _ fib ( 4 ) 13 > > > prime _ fib ( 5 ) 89 \" \" \" def string _ to _ md5 ( text ) : \" \" \" given a string'text"]
[", the sum of digits will be 12 the output should be \" 1100 \". variables : @ n integer constraints : 0 \u2264 n \u2264 10000. output : a string of binary number \" \" \" def remove _ vowels ( text ) : \" \" \" remove _ vowels is a function that takes string and returns string without"]
["2 ) # f ( x ) = 1 + 2x - 0. 5 > > > round ( find _ zero ( [ - 6, 11, - 6, 1 ] ), 2 ) # ( x - 1 ) * ( x - 2 ) * ( x - 3 ) = - 6 + 11x"]
["output should be 29 for lst = [ - 2. 4, 1, 1 ] the output should be 6 \" \" \" def pairs _ sum _ to _ zero ( l ) : \" \" \" pairs _ sum _ to _ zero takes a list of integers as an input. it returns true if there are two"]
["positive integers that start or end with 1. \" \" \" from typing import list def parse _ nested _ parens ( paren _ string : str ) - > list [ int ] : \" \" \" input to this function is a string represented multiple groups for nested parentheses separated by spaces. for each"]
["( [ - 1, 11, - 11 ] ) = = 1 > > > count _ nums ( [ 1, 1, 2 ] ) = = 3 \" \" \" def do _ algebra ( operator, operand ) : \" \" \" given two lists operator, and operand. the first list has basic"]
["\" \" \" def can _ arrange ( arr ) : \" \" \" create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. if no such element exists then return - 1. the given array will not contain duplicate values. examples : can _ arrange"]
["shift function. returns decoded string. \" \" \" def sum _ squares ( lst ) : \" \" \" you are given a list of numbers. you need to return the sum of squared numbers in the given list, round each element in the list to the upper int ( ceiling ) first. examples : for l"]
[", 2, 3 ], 1 ) [UNK] false # it's balanced, but 3 + 2 + 3 is more than the maximum possible weight. will _ it _ fly ( [ 3, 2, 3 ], 9 ) [UNK] true # 3 + 2 + 3 is less than the maximum possible weight, and it"]
["efficiently compute the n - th element of the fibfib number sequence. > > > fibfib ( 1 ) 0 > > > fibfib ( 5 ) 4 > > > fibfib ( 8 ) 24 \" \" \" def fib ( n : int ) : \" \" \" return n - th"]
[", 3 ] ) [ 1, 2, 3 ] > > > sort _ third ( [ 5, 6, 3, 4, 8, 9, 2 ] ) [ 2, 6, 3, 4, 8, 9, 5 ] \" \" \" def encode ( message ) : \" \" \" write a"]
[", 4 ) ) = = > \" no \" intersection ( ( - 3, - 1 ), ( - 5, 5 ) ) = = > \" yes \" \" \" \" def hex _ key ( num ) : \" \" \" you have been tasked to write a function that receives a hexadeci"]
["5, 6 ] the output should be 11 for lst = [ 0, 81, 12, 3, 1, 21 ] the output should be 3 for lst = [ 0, 8, 1, 2, 1, 7 ] the output should be 7 \" \" \" def median ( l : list ) :"]
["insert a number'delimeter'between every two consecutive elements of input list ` numbers'> > > intersperse ( [ ], 4 ) [ ] > > > intersperse ( [ 1, 2, 3 ], 4 ) [ 1, 4, 2, 4, 3 ] \" \" \" import"]
[") 3 > > > how _ many _ times ('aaaa ','aa') 3 \" \" \" def f ( n ) : \" \" \" implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the"]
["##r ) - > int : \" \" \" find how many times a given substring can be found in the original string. count overlaping cases. > > > how _ many _ times ('','a') 0 > > > how _ many _ times ('aaa ','a '"]
["false \" \" \" def same _ chars ( s0 : str, s1 : str ) : \" \" \" check if two words have the same characters. > > > same _ chars ('eabcdzzzz ','dddzzzzzzzddeddabc') true"]
["elements in the array will be in the range of [ - 1000, 1000 ]. 3. 0 < = k < = len ( arr ) \" \" \" from typing import list def intersperse ( numbers : list [ int ], delimeter : int ) - > list [ int ] : \" \" \""]
["odd, the next term is 3 times the previous term plus 1. the conjecture is that no matter what value of n, the sequence will always reach 1. note : 1. collatz ( 1 ) is [ 1 ]. 2. returned list sorted in increasing order. for example : get _ odd _ col"]
["] ], k = 1 output : [ 1 ] \" \" \" def derivative ( xs : list ) : \" \" \" xs represent coefficients of a polynomial. xs [ 0 ] + xs [ 1 ] * x + xs [ 2 ] * x ^ 2 +.... return derivative"]
["node. value \" \" \" def sum _ squares ( lst ) : \" \" \" \" this function will take a list of integers. for all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4"]
["poly ( x ) = 0. find _ zero returns only only zero point, even if there are many. moreover, find _ zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution. > > > round ( find _ zero ( [ 1, 2 ] ),"]
["servingslices'is the strongest extension ( its strength is - 1 ). example : for strongest _ extension ('my _ class ', ['aa ','be ','cc'] ) = ='my _ class. aa'\" \" \" def specialfilter ( nums ) :"]
["of the odd digits. return 0 if all digits are even. for example : digits ( 1 ) = = 1 digits ( 4 ) = = 0 digits ( 235 ) = = 15 \" \" \" def triangle _ area ( a, b, c ) :'''given the lengths of the three sides of a"]
["2, 3 ) 5 > > > add ( 5, 7 ) 12 \" \" \" def prime _ length ( string ) : \" \" \" write a function that takes a string and returns true if the string length is a prime number or false otherwise examples prime _ length ('hello') = = true prime _"]
["( [ - 1, 11, - 11 ] ) = = 1 > > > count _ nums ( [ 1, 1, 2 ] ) = = 3 \" \" \" def do _ algebra ( operator, operand ) : \" \" \" given two lists operator, and operand. the first list has basic"]
["\" \" task we are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome. a string is called palindrome if it reads the same backward as forward. you should return a tuple"]
["empty the wells. output the number of times you need to lower the buckets. example 1 : input : grid : [ [ 0, 0, 1, 0 ], [ 0, 1, 0, 0 ], [ 1, 1, 1, 1 ] ] bucket _ capacity : 1 output : 6 example"]
["smallest even value, and 2 has the smallest index. example 2 : input : [ 1, 2, 3 ] output : [ 2, 1 ] explanation : 2 has the smallest even value, and 2 has the smallest index. example 3 : input : [ ] output : [ ] example 4 : input : [ 5"]
["> prime _ fib ( 2 ) 3 > > > prime _ fib ( 3 ) 5 > > > prime _ fib ( 4 ) 13 > > > prime _ fib ( 5 ) 89 \" \" \" def string _ to _ md5 ( text ) : \" \" \" given a string'text"]
["\", \" eeff \" ) = > false cycpattern _ check ( \" himenss \", \" simen \" ) = > true \" \" \" def circular _ shift ( x, shift ) : \" \" \" circular shift the digits of the integer x, shift the digits right by shift and return"]
["a positive floating point number, it can be decomposed into and integer part ( largest integer smaller than given number ) and decimals ( leftover part always smaller than 1 ). return the decimal part of the number. > > > truncate _ number ( 3. 5 ) 0. 5 \" \" \""]
["( [ 1 ] ) false \" \" \" def is _ palindrome ( text : str ) : \" \" \" checks if given string is a palindrome > > > is _ palindrome ('' ) true > > > is _ palindrome ('aba')"]
["''given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should split on commas ','if no commas exists you should return the number of lower - case letters with odd order in the alphabet, ord ('a '"]
["number < = 1000 * 0 < = need < = 1000 * 0 < = remaining < = 1000 have fun : ) \" \" \" def triples _ sum _ to _ zero ( l : list ) : \" \" \" triples _ sum _ to _ zero takes a list of integers as an input. it returns"]
["to write a function which validates a given date string and returns true if the date is valid otherwise false. the date is valid if all of the following rules are satisfied : 1. the date string is not empty. 2. the number of days is not less than 1 or higher than 31 days for months 1,"]
["will be an extra couple of characters'db'at the beginning and at the end of the string. the extra characters are there to help with the format. examples : decimal _ to _ binary ( 15 ) # returns \" db1111db \" decimal _ to _ binary ( 32 ) # returns \" db10000"]
["0 ] ) = = 0 double _ the _ difference ( [ 9, - 2 ] ) = = 81 double _ the _ difference ( [ 0 ] ) = = 0 if the input list is empty, return 0.'''def greatest _ common _ divisor ( a : int, b : int"]
["rolling _ max ( [ 1, 2, 3, 2, 3, 4, 2 ] ) [ 1, 2, 3, 3, 3, 4, 4 ] \" \" \" def add ( x : int, y : int ) : \" \" \" add two numbers x and y > > > add ("]
["cases. x is a simple power of n if n * * int = x for example : is _ simple _ power ( 1, 4 ) = > true is _ simple _ power ( 2, 2 ) = > true is _ simple _ power ( 8, 2 ) = > true is _ simple _ power ("]
["', { }, [ ] ] ) [ 1, 2, 3 ] \" \" \" def generate _ integers ( a, b ) : \" \" \" given two positive integers a and b, return the even digits between a and b, in ascending order. for example : generate _ integers ( 2, 8 )"]
["the largest prime value and return the sum of its digits. examples : for lst = [ 0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3 ] the"]
["[ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ], k = 3 output : [ 1, 2, 1 ] input : grid = [ [ 5, 9, 3 ], [ 4, 1, 6 ], [ 7, 8, 2"]
["_ smallest ( [ 1, 2, 3, 4, 5 ] ) = = 2 next _ smallest ( [ 5, 1, 4, 3, 2 ] ) = = 2 next _ smallest ( [ ] ) = = none next _ smallest ( [ 1, 1 ] ) = = none \" \" \" def"]
["of the odd digits. return 0 if all digits are even. for example : digits ( 1 ) = = 1 digits ( 4 ) = = 0 digits ( 235 ) = = 15 \" \" \" def triangle _ area ( a, b, c ) :'''given the lengths of the three sides of a"]
["is a pair of integers. for example, interval = ( start, end ) = ( 1, 2 ). the given intervals are closed which means that the interval ( start, end ) includes both start and end. for each given interval, it is assumed that its start is less or equal its end. your task"]
["] and for any j ( 1 < = j < i ) we have lst _ a [ j ] = lst _ b [ j ]. it is guaranteed that the answer is unique. return an ordered list of the values on the cells that the minimum path go through. examples : input : grid = ["]
["\" \" \" \" given an array representing a branch of a tree that has non - negative integer nodes your task is to pluck one of the nodes and return it. the plucked node should be the node with the smallest even value. if multiple nodes with the same smallest even value are found return the node that has smallest"]
["the output should be 0 for lst = [ - 1, - 5, 2, - 1, - 5 ] the output should be - 126 \" \" \" from typing import list def concatenate ( strings : list [ str ] ) - > str : \" \" \" concatenate list of strings"]
["= = > \" u \" get _ closest _ vowel ( \" full \" ) = = > \" u \" get _ closest _ vowel ( \" quick \" ) = = > \" \" get _ closest _ vowel ( \" ab \" ) = = > \" \" \" \" \" def compare _ one ( a, b )"]
[", b ) : \" \" \" you are given 2 words. you need to return true if the second word or any of its rotations is a substring in the first word cycpattern _ check ( \" abcd \", \" abd \" ) = > false cycpattern _ check ( \""]
["the extension's name, and let sm be the number of lowercase letters in the extension's name, the strength is given by the fraction cap - sm. you should find the strongest extension and return a string in this format : classname. strongestextensionname. if there are two or more extensions with"]
[") = \" 4321 \" solve ( \" ab \" ) = \" ab \" solve ( \" # a @ c \" ) = \" # a @ c \" \" \" \" def starts _ one _ ends ( n ) : \" \" \" given a positive integer n, return the count of the numbers of n - digit"]
["odd, the next term is 3 times the previous term plus 1. the conjecture is that no matter what value of n, the sequence will always reach 1. note : 1. collatz ( 1 ) is [ 1 ]. 2. returned list sorted in increasing order. for example : get _ odd _ col"]
["( 4 ) 288 the function will receive an integer as input and should return the special factorial of this integer. \" \" \" from typing import list def remove _ duplicates ( numbers : list [ int ] ) - > list [ int ] : \" \" \" from a list of integers, remove all elements that occur"]
["+ tri ( 4 ) = 2 + 3 + 3 = 8 you are given a non - negative integer number n, you have to a return a list of the first n + 1 numbers of the tribonacci sequence. examples : tri ( 3 ) = [ 1, 3, 2, 8 ] \" \""]
["##st = [ 1, 2, 3 ] the output should be 14 for lst = [ 1, 4, 9 ] the output should be 98 for lst = [ 1, 3, 5, 7 ] the output should be 84 for lst = [ 1. 4, 4. 2, 0 ] the"]
[", calculate mean absolute deviation around the mean of this dataset. mean absolute deviation is the average absolute difference between each element and a centerpoint ( mean in this case ) : mad = average | x - x _ mean | > > > mean _ absolute _ deviation ( [ 1. 0, 2. 0, 3"]
["arr, k ) : \" \" \" given a non - empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr. example : input : arr = [ 111, 21, 3, 4000, 5, 6,"]
[") = = > ( \" saturn \", \" uranus \" ) bf ( \" earth \", \" mercury \" ) = = > ( \" venus \" ) bf ( \" mercury \", \" uranus \" ) = = > ( \" venus \", \" earth \", \" mars \", \" jupiter \", \""]
[", 2, 3 ], 1 ) [UNK] false # it's balanced, but 3 + 2 + 3 is more than the maximum possible weight. will _ it _ fly ( [ 3, 2, 3 ], 9 ) [UNK] true # 3 + 2 + 3 is less than the maximum possible weight, and it"]
[", \" world! \" ] split _ words ( \" abcdef \" ) = = 3'''from typing import list def separate _ paren _ groups ( paren _ string : str ) - > list [ str ] : \" \" \" input to this function is a string containing multiple groups of"]
["string _ sequence ( 5 )'0 1 2 3 4 5'\" \" \" def closest _ integer ( value ) :'''create a function that takes a value ( string ) representing a number and returns the closest integer to it. if the number is equidistant from two integers, round it"]
["x1, y1 ), ( x2, y2 )... ] such that each tuple is a coordinate - ( row, columns ), starting with 0. sort coordinates initially by rows in ascending order. also, sort coordinates of the row by columns in descending order. examples : get _ row"]
["= \" enam \" find _ max ( [ \" aaaaaaa \", \" bb \", \" cc \" ] ) = = \" \" aaaaaaa \" \" \" \" def monotonic ( l : list ) : \" \" \" return true is list elements are monotonically increasing or decreasing. > > >"]
["sum _ to _ zero ( [ 1, 2, 3, 7 ] ) false > > > pairs _ sum _ to _ zero ( [ 2, 4, - 5, 3, 5, 7 ] ) true > > > pairs _ sum _ to _ zero ( [ 1 ] ) false \" \" \" def"]
["math def poly ( xs : list, x : float ) : \" \" \" evaluates polynomial with coefficients xs at point x. return xs [ 0 ] + xs [ 1 ] * x + xs [ 1 ] * x ^ 2 +.... xs [ n ] * x"]
["7 appears in integers less than n which are divisible by 11 or 13. > > > fizz _ buzz ( 50 ) 0 > > > fizz _ buzz ( 78 ) 2 > > > fizz _ buzz ( 79 ) 3 \" \" \" def compare ( game, guess ) : \" \" \""]
["2 ) # f ( x ) = 1 + 2x - 0. 5 > > > round ( find _ zero ( [ - 6, 11, - 6, 1 ] ), 2 ) # ( x - 1 ) * ( x - 2 ) * ( x - 3 ) = - 6 + 11x"]
["> prime _ fib ( 2 ) 3 > > > prime _ fib ( 3 ) 5 > > > prime _ fib ( 4 ) 13 > > > prime _ fib ( 5 ) 89 \" \" \" def string _ to _ md5 ( text ) : \" \" \" given a string'text"]
["0 ] ) = = 0 double _ the _ difference ( [ 9, - 2 ] ) = = 81 double _ the _ difference ( [ 0 ] ) = = 0 if the input list is empty, return 0.'''def greatest _ common _ divisor ( a : int, b : int"]
[": \" \" \" given a string, find out how many distinct characters ( regardless of case ) does it consist of > > > count _ distinct _ characters ('xyzxyz') 3 > > > count _ distinct _ characters ('jerry') 4 \" \" \" def solve ( s ) :"]
["( [ 1, 2, 4, 3, 5 ] ) = 3 can _ arrange ( [ 1, 2, 3 ] ) = - 1 \" \" \" def maximum ( arr, k ) : \" \" \" given an array arr of integers and a positive integer k, return a sorted list of length"]
[", calculate mean absolute deviation around the mean of this dataset. mean absolute deviation is the average absolute difference between each element and a centerpoint ( mean in this case ) : mad = average | x - x _ mean | > > > mean _ absolute _ deviation ( [ 1. 0, 2. 0, 3"]
[", 0 ), ( 2, 5 ), ( 2, 0 ) ] get _ row ( [ ], 1 ) = = [ ] get _ row ( [ [ ], [ 1 ], [ 1, 2, 3 ] ], 3 ) = = [ ( 2, 2 ) ] \" \" \""]
["_ zero ( [ 1, 2, - 4, 5 ] ) true \" \" \" def is _ happy ( s ) : \" \" \" you are given a string s. your task is to check if the string is happy or not. a string is happy if its length is at least 3 and every 3 consecutive"]
["servingslices'is the strongest extension ( its strength is - 1 ). example : for strongest _ extension ('my _ class ', ['aa ','be ','cc'] ) = ='my _ class. aa'\" \" \" def specialfilter ( nums ) :"]
["a _ letter ( \" apple pie \" ) [UNK] false check _ if _ last _ char _ is _ a _ letter ( \" apple pi e \" ) [UNK] true check _ if _ last _ char _ is _ a _ letter ( \" apple pi e \" ) [UNK] false check _ if _ last _ char _ is"]
["string _ sequence ( 5 )'0 1 2 3 4 5'\" \" \" def closest _ integer ( value ) :'''create a function that takes a value ( string ) representing a number and returns the closest integer to it. if the number is equidistant from two integers, round it"]
["i think we all remember that feeling when the result of some long - awaited event is finally known. the feelings and thoughts you have at that moment are definitely worth noting down and comparing. your task is to determine if a person correctly guessed the results of a number of matches. you are given two arrays of scores and guess"]
["2 ) # f ( x ) = 1 + 2x - 0. 5 > > > round ( find _ zero ( [ - 6, 11, - 6, 1 ] ), 2 ) # ( x - 1 ) * ( x - 2 ) * ( x - 3 ) = - 6 + 11x"]
["a positive floating point number, it can be decomposed into and integer part ( largest integer smaller than given number ) and decimals ( leftover part always smaller than 1 ). return the decimal part of the number. > > > truncate _ number ( 3. 5 ) 0. 5 \" \" \""]
["all spaces in it with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with - fix _ spaces ( \" example \" ) = = \" example \" fix _ spaces ( \" example 1 \" ) = = \" example _ 1 \" fix _ spaces ( \" example 2 \""]
["_ area ( 5, 3 ) 7. 5 \" \" \" def will _ it _ fly ( q, w ) :'''write a function that returns true if the object q will fly, and false otherwise. the object q will fly if it's balanced ( it is a palindromic list"]
[") : \" \" \" you are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. given lst, and integer x, find integers x in the list, and return list of tuples, [ ("]
["levels of stones. the first level has n stones. the number of stones in the next level is : - the next odd number if n is odd. - the next even number if n is even. return the number of stones in each level in a list, where element at index i represents the number of stones in"]
["the largest of negative integers, and'b'is the smallest of positive integers in a list. if there is no negative or positive integers, return them as none. examples : largest _ smallest _ integers ( [ 2, 4, 1, 3, 5, 7 ] ) = = ( none, 1 ) largest"]
["list in strange order. strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on. examples : strange _ sort _ list ( [ 1, 2, 3, 4 ] ) = = [ 1, 4, 2, 3 ] strange _ sort _ list"]
["( [ 1 ] ) false \" \" \" def is _ palindrome ( text : str ) : \" \" \" checks if given string is a palindrome > > > is _ palindrome ('' ) true > > > is _ palindrome ('aba')"]
["4, 4, 4 ] ) = = - 1'''def correct _ bracketing ( brackets : str ) : \" \" \" brackets is a string of \" ( \" and \" ) \". return true if every opening bracket has a corresponding closing bracket. > > > correct _ bracketing ( \" ("]
["##es of equal length, where each index shows a match. return an array of the same length denoting how far off each guess was. if they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score. example : compare ( [ 1, 2"]
["> > > same _ chars ('abcd ','dddddddabc') true > > > same _ chars ('dddddddabc ','abcd') true > > > same _ chars ('eabcd ','dddddddabc"]
["\" \" task we are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome. a string is called palindrome if it reads the same backward as forward. you should return a tuple"]
["the level ( i + 1 ). examples : > > > make _ a _ pile ( 3 ) [ 3, 5, 7 ] \" \" \" def is _ sorted ( lst ) :'''given a list of numbers, return whether or not they are sorted in ascending order. if list has more"]
["call them lst _ a and lst _ b ), lst _ a is lexicographically less than lst _ b, in other words, there exist an integer index i ( 1 < = i < = k ) such that lst _ a [ i ] < lst _ b [ i"]
["from typing import list, tuple def find _ closest _ elements ( numbers : list [ float ] ) - > tuple [ float, float ] : \" \" \" from a supplied list of numbers ( of length at least two ) select and return two that are the closest to each other and return them in order ("]
["true > > > is _ palindrome ('aaaaa') true > > > is _ palindrome ('zbcd') false \" \" \" from typing import list def string _ xor ( a : str, b : str ) - > str : \" \""]
["will be an extra couple of characters'db'at the beginning and at the end of the string. the extra characters are there to help with the format. examples : decimal _ to _ binary ( 15 ) # returns \" db1111db \" decimal _ to _ binary ( 32 ) # returns \" db10000"]
["non - empty list of integers lst. add the even elements that are at odd indices.. examples : add ( [ 4, 2, 6, 7 ] ) = = > 2 \" \" \" def change _ base ( x : int, base : int ) : \" \" \" change numerical base of input number"]
["3, 5, 7, 8, 10, 12. and the number of days is not less than 1 or higher than 30 days for months 4, 6, 9, 11. and, the number of days is not less than 1 or higher than 29 for the month 2. 3. the months should not be"]
[", and your task is to count the number of boredoms. a boredom is a sentence that starts with the word \" i \". sentences are delimited by '. ', '?'or '! '. for example : > > > is _ bored ( \" hello world \" ) 0 > > >"]
[", 4 ) ) = = > \" no \" intersection ( ( - 3, - 1 ), ( - 5, 5 ) ) = = > \" yes \" \" \" \" def hex _ key ( num ) : \" \" \" you have been tasked to write a function that receives a hexadeci"]
["levels of stones. the first level has n stones. the number of stones in the next level is : - the next odd number if n is odd. - the next even number if n is even. return the number of stones in each level in a list, where element at index i represents the number of stones in"]
["( [ 1, 2, 4, 3, 5 ] ) = 3 can _ arrange ( [ 1, 2, 3 ] ) = - 1 \" \" \" def maximum ( arr, k ) : \" \" \" given an array arr of integers and a positive integer k, return a sorted list of length"]
["' > > > encode ('this is a message')'thks ks c mgsscgg'\" \" \" from typing import list, tuple def sum _ product ( numbers : list [ int ] ) - > tuple [ int, int ] : \" \" \" for a given list of"]
["> prime _ fib ( 2 ) 3 > > > prime _ fib ( 3 ) 5 > > > prime _ fib ( 4 ) 13 > > > prime _ fib ( 5 ) 89 \" \" \" def string _ to _ md5 ( text ) : \" \" \" given a string'text"]
["+ tri ( 4 ) = 2 + 3 + 3 = 8 you are given a non - negative integer number n, you have to a return a list of the first n + 1 numbers of the tribonacci sequence. examples : tri ( 3 ) = [ 1, 3, 2, 8 ] \" \""]
["monotonic ( [ 1, 2, 4, 20 ] ) true > > > monotonic ( [ 1, 20, 4, 10 ] ) false > > > monotonic ( [ 4, 1, 0, - 10 ] ) true \" \" \" def add ( lst ) : \" \" \" given a"]
["special _ factorial ( n ) : \" \" \" the brazilian factorial is defined as : brazilian _ factorial ( n ) = n! * ( n - 1 )! * ( n - 2 )! *... * 1! where n > 0 for example : > > > special _ factorial"]
["given an array arr of integers and you need to return sum of magnitudes of integers multiplied by product of all signs of each number in the array, represented by 1, - 1 or 0. note : return none for empty arr. example : > > > prod _ signs ( [ 1, 2,"]
[", 0, - 2 ] ) - > [ 4, 4, 1, 0, 0, 6 ] \" \" \" def is _ simple _ power ( x, n ) : \" \" \" your task is to write a function that returns true if a number x is a simple power of n and false in other"]
["sequence. don't use recursion. > > > fib4 ( 5 ) 4 > > > fib4 ( 6 ) 8 > > > fib4 ( 7 ) 14 \" \" \" def intersection ( interval1, interval2 ) : \" \" \" you are given two intervals, where each interval"]
["x to base. return string representation after the conversion. base numbers are less than 10. > > > change _ base ( 8, 3 )'22'> > > change _ base ( 8, 2 )'1000'> > > change _ base ( 7, 2 )'111'\" \" \" def"]
["all spaces in it with underscores, and if a string has more than 2 consecutive spaces, then replace all consecutive spaces with - fix _ spaces ( \" example \" ) = = \" example \" fix _ spaces ( \" example 1 \" ) = = \" example _ 1 \" fix _ spaces ( \" example 2 \""]
["math def poly ( xs : list, x : float ) : \" \" \" evaluates polynomial with coefficients xs at point x. return xs [ 0 ] + xs [ 1 ] * x + xs [ 1 ] * x ^ 2 +.... xs [ n ] * x"]
[") : \" \" \" you are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. given lst, and integer x, find integers x in the list, and return list of tuples, [ ("]
["##c62'\" \" \" def is _ prime ( n ) : \" \" \" return true if a given number is prime, and false otherwise. > > > is _ prime ( 6 ) false > > > is _ prime ( 101 ) true > > > is _ prime ( 11 ) true > > >"]
[", 2, 3, 3, 9, 0, 123 ] ) [ 0, 2, 3, 5, 9, 123 ] \" \" \" from typing import list def below _ zero ( operations : list [ int ] ) - > bool : \" \" \" you're given a list of deposit and withdrawal"]
["and not a multiple of 3. the function will not change the entries in the list whose indexes are not a multiple of 3 or 4. the function shall then return the sum of all entries. examples : for lst = [ 1, 2, 3 ] the output should be 6 for lst = [ ]"]
["strings have maximum number of unique characters, return the one which comes first in lexicographical order. find _ max ( [ \" name \", \" of \", \" string \" ] ) = = \" string \" find _ max ( [ \" name \", \" enam \", \" game \" ] ) ="]
["that the letters shift down by two multiplied to two places. for example : encrypt ('hi') returns'lm'encrypt ('asdfghjkl') returns'ewhjklnop'encrypt ('gf') returns'k"]
["is _ bored ( \" the sky is blue. the sun is shining. i love this weather \" ) 1 \" \" \" def find _ max ( words ) : \" \" \" write a function that accepts a list of strings. the list contains different words. return the word with maximum number of unique characters. if multiple"]
["path of length k means visiting exactly k cells ( not necessarily distinct ). you cannot go off the grid. a path a ( of length k ) is considered less than a path b ( of length k ) if after making the ordered lists of the values on the cells that a and b go through ( let's"]
["the same strength, you should choose the one that comes first in the list. for example, if you are given \" slices \" as the class and a list of the extensions : ['servingslices ','cheese ','stuffed'] then you should return'slices. servingslices'since '"]
["1077e \" the output should be 2. for num = \" abed1a33 \" the output should be 4. for num = \" 123456789abcdef0 \" the output should be 6. for num = \" 2020 \" the output should be 2. \" \""]
["\" \" \" the fib4 number sequence is a sequence similar to the fibbonacci sequnece that's defined as follows : fib4 ( 0 ) - > 0 fib4 ( 1 ) - > 0 fib4 ( 2 ) - > 2 fib4 ( 3 ) -"]
["index. the plucked node should be returned in a list, [ smalest _ value, its index ], if there are no even values or the given array is empty, return [ ]. example 1 : input : [ 4, 2, 3 ] output : [ 2, 1 ] explanation : 2 has the"]
["the right side of the word ( case sensitive ). vowels in the beginning and ending doesn't count. return empty string if you didn't find any vowel met the above condition. you may assume that the given string contains english letter only. example : get _ closest _ vowel ( \" yogurt \" )"]
["##0db \" \" \" \" def minpath ( grid, k ) : \" \" \" given a grid with n rows and n columns ( n > = 2 ) and a positive integer k, each cell of the grid contains a value. every integer in the range [ 1, n * n ] inclusive appears exactly once"]
["5, 6, 7, 8, 9, a, b, c, d, e, f. prime numbers are 2, 3, 5, 7, 11, 13, 17,... so you have to determine a number of the following digits : 2, 3, 5, 7, b ("]
["path of length k means visiting exactly k cells ( not necessarily distinct ). you cannot go off the grid. a path a ( of length k ) is considered less than a path b ( of length k ) if after making the ordered lists of the values on the cells that a and b go through ( let's"]
["strong ; as a result, they continue moving in their trajectory as if they did not collide. this function outputs the number of such collisions. \" \" \" def get _ odd _ collatz ( n ) : \" \" \" given a positive integer n, return a sorted list that has the odd numbers in col"]
["\" \" \" the fib4 number sequence is a sequence similar to the fibbonacci sequnece that's defined as follows : fib4 ( 0 ) - > 0 fib4 ( 1 ) - > 0 fib4 ( 2 ) - > 2 fib4 ( 3 ) -"]
["return \" yes \", otherwise, return \" no \". if the two intervals don't intersect, return \" no \". [ input / output ] samples : intersection ( ( 1, 2 ), ( 2, 3 ) ) = = > \" no \" intersection ( ( - 1, 1 ), ( 0"]
["##0db \" \" \" \" def minpath ( grid, k ) : \" \" \" given a grid with n rows and n columns ( n > = 2 ) and a positive integer k, each cell of the grid contains a value. every integer in the range [ 1, n * n ] inclusive appears exactly once"]
["and not a multiple of 3. the function will not change the entries in the list whose indexes are not a multiple of 3 or 4. the function shall then return the sum of all entries. examples : for lst = [ 1, 2, 3 ] the output should be 6 for lst = [ ]"]
["operations on a bank account that starts with zero balance. your task is to detect if at any point the balance of account fallls below zero, and at that point function should return true. otherwise it should return false. > > > below _ zero ( [ 1, 2, 3 ] ) false > > > below"]
["n is a prime number and should return the value of y otherwise. examples : for x _ or _ y ( 7, 34, 12 ) = = 34 for x _ or _ y ( 15, 8, 5 ) = = 5 \" \" \" def solution ( lst ) : \" \" \" given a non"]
["##st ) : \" \" \" write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order, the list is always a list of strings and never an array of numbers, and it may contain duplicates. the"]
["3, 5, 7, 8, 10, 12. and the number of days is not less than 1 or higher than 30 days for months 4, 6, 9, 11. and, the number of days is not less than 1 or higher than 29 for the month 2. 3. the months should not be"]
["##s and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket. for examble : fruit _ distribution ( \" 5 apples and 6 oranges \", 19 ) - > 19 - 5 - 6 = 8 fruit _ distribution ( \" 0 apples and"]
["> correct _ bracketing ( \" < > \" ) true > > > correct _ bracketing ( \" < < > < > > \" ) true > > > correct _ bracketing ( \" > < < > \" ) false \" \" \" def prod _ signs ( arr ) : \" \" \" you are"]
["the largest prime value and return the sum of its digits. examples : for lst = [ 0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3 ] the"]
["x1, y1 ), ( x2, y2 )... ] such that each tuple is a coordinate - ( row, columns ), starting with 0. sort coordinates initially by rows in ascending order. also, sort coordinates of the row by columns in descending order. examples : get _ row"]
["\" def sort _ array ( arr ) : \" \" \" in this kata, you have to sort an array of non - negative integers according to number of ones in their binary representation in ascending order. for similar number of ones, sort based on decimal value. it must be implemented like this : > > > sort"]
["= > false iscube ( - 1 ) = = > true iscube ( 64 ) = = > true iscube ( 0 ) = = > true iscube ( 180 ) = = > false'''def how _ many _ times ( string : str, substring : st"]
["> correct _ bracketing ( \" < > \" ) true > > > correct _ bracketing ( \" < < > < > > \" ) true > > > correct _ bracketing ( \" > < < > \" ) false \" \" \" def prod _ signs ( arr ) : \" \" \" you are"]
[") = 0, ord ('b') = 1,... ord ('z') = 25 examples split _ words ( \" hello world! \" ) [UNK] [ \" hello \", \" world! \" ] split _ words ( \" hello, world! \" ) [UNK] [ \" hello \""]
["servingslices'is the strongest extension ( its strength is - 1 ). example : for strongest _ extension ('my _ class ', ['aa ','be ','cc'] ) = ='my _ class. aa'\" \" \" def specialfilter ( nums ) :"]
["', return its md5 hash equivalent string. if'text'is an empty string, return none. > > > string _ to _ md5 ('hello world') = ='3e25960a79dbc69b674cd4ec67a72"]
["exactly 4 positive even numbers example is _ equal _ to _ sum _ even ( 4 ) = = false is _ equal _ to _ sum _ even ( 6 ) = = false is _ equal _ to _ sum _ even ( 8 ) = = true \" \" \" def get _ positive ( l : list ) :"]
[") ] for i in range ( ( len ( s ) + 2 ) / / 3 ) ] # cycle elements in each group. unless group has fewer elements than 3. groups = [ ( group [ 1 : ] + group [ 0 ] ) if len ( group ) = = 3 else group for group in groups"]
[") 3 > > > how _ many _ times ('aaaa ','aa') 3 \" \" \" def f ( n ) : \" \" \" implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the"]
["the result as a string. if shift > number of digits, return digits reversed. > > > circular _ shift ( 12, 1 ) \" 21 \" > > > circular _ shift ( 12, 2 ) \" 12 \" \" \" \" def check _ if _ last _ char _ is _ a _ letter ( tx"]
["def iscube ( a ) :'''write a function that takes an integer a and returns true if this ingeger is a cube of some integer number. note : you may assume the input is always valid. examples : iscube ( 1 ) = = > true iscube ( 2 ) ="]
["^ n \" \" \" return sum ( [ coeff * math. pow ( x, i ) for i, coeff in enumerate ( xs ) ] ) def find _ zero ( xs : list ) : \" \" \" xs are coefficients of a polynomial. find _ zero find x such that"]
["rolling _ max ( [ 1, 2, 3, 2, 3, 4, 2 ] ) [ 1, 2, 3, 3, 3, 4, 4 ] \" \" \" def add ( x : int, y : int ) : \" \" \" add two numbers x and y > > > add ("]
["if no such a value exist, return - 1. examples : search ( [ 4, 1, 2, 2, 3, 1 ] ) = = 2 search ( [ 1, 2, 2, 3, 3, 3, 4, 4, 4 ] ) = = 3 search ( [ 5, 5,"]
["cases. x is a simple power of n if n * * int = x for example : is _ simple _ power ( 1, 4 ) = > true is _ simple _ power ( 2, 2 ) = > true is _ simple _ power ( 8, 2 ) = > true is _ simple _ power ("]
["poly ( x ) = 0. find _ zero returns only only zero point, even if there are many. moreover, find _ zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution. > > > round ( find _ zero ( [ 1, 2 ] ),"]
[", and don't have zero as denominator. simplify ( \" 1 / 5 \", \" 5 / 1 \" ) = true simplify ( \" 1 / 6 \", \" 2 / 1 \" ) = false simplify ( \" 7 / 10 \", \" 10 / 2 \" ) = false \" \""]
["##latz ( 5 ) returns [ 1, 5 ] # the collatz sequence for 5 is [ 5, 16, 8, 4, 2, 1 ], so the odd numbers are only 1, and 5. \" \" \" def even _ odd _ palindrome ( n ) : \" \" \""]
["of the odd digits. return 0 if all digits are even. for example : digits ( 1 ) = = 1 digits ( 4 ) = = 0 digits ( 235 ) = = 15 \" \" \" def triangle _ area ( a, b, c ) :'''given the lengths of the three sides of a"]
["saturn \" )'''def anti _ shuffle ( s ) : \" \" \" write a function that takes a string and returns an ordered version of it. ordered version of string, is a string where all words ( separated by space ) are replaced by a new word where all the characters arranged in ascending order based on"]
["''given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should split on commas ','if no commas exists you should return the number of lower - case letters with odd order in the alphabet, ord ('a '"]
["output should be 10 for lst = [ 1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1 ] the output should be 25 for lst = [ 1, 3, 1, 32"]
[") = > 131 digitsum ( \" abccd \" ) = > 67 digitsum ( \" helloe \" ) = > 69 digitsum ( \" woarbld \" ) = > 131 digitsum ( \" aaaaaxa \" ) = > 153 \" \" \" def fib4 ( n : int ) :"]
[") ( ( ) ( ) )') ['( ) ','( ( ) ) ','( ( ) ( ) )'] \" \" \" def get _ max _ triples ( n ) : \" \" \" you are given a positive integer n. you have to create an integer array a"]
["> > > same _ chars ('abcd ','dddddddabc') true > > > same _ chars ('dddddddabc ','abcd') true > > > same _ chars ('eabcd ','dddddddabc"]
["will be an extra couple of characters'db'at the beginning and at the end of the string. the extra characters are there to help with the format. examples : decimal _ to _ binary ( 15 ) # returns \" db1111db \" decimal _ to _ binary ( 32 ) # returns \" db10000"]
[", - 2, - 3 ] ) = = - 6 \" \" \" def encrypt ( s ) : \" \" \" create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. the alphabet should be rotated in a manner such"]
["the level ( i + 1 ). examples : > > > make _ a _ pile ( 3 ) [ 3, 5, 7 ] \" \" \" def is _ sorted ( lst ) :'''given a list of numbers, return whether or not they are sorted in ascending order. if list has more"]
["positive integers that start or end with 1. \" \" \" from typing import list def parse _ nested _ parens ( paren _ string : str ) - > list [ int ] : \" \" \" input to this function is a string represented multiple groups for nested parentheses separated by spaces. for each"]
["_ a _ letter ( \" \" ) [UNK] false'''def common ( l1 : list, l2 : list ) : \" \" \" return sorted unique common elements for two lists. > > > common ( [ 1, 4, 3, 34, 653, 2, 5 ], [ 5,"]
["smallest even value, and 2 has the smallest index. example 2 : input : [ 1, 2, 3 ] output : [ 2, 1 ] explanation : 2 has the smallest even value, and 2 has the smallest index. example 3 : input : [ ] output : [ ] example 4 : input : [ 5"]
["a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one. example 1 : input : sentence = \" this is a"]
["less than 1 or higher than 12. 4. the date should be in the format : mm - dd - yyyy for example : valid _ date ('03 - 11 - 2000') = > true valid _ date ('15 - 01 - 2012') = > false valid _ date ( '"]
["( [ [ 1, 2, 3, 4, 5, 6 ], [ 1, 2, 3, 4, 1, 6 ], [ 1, 2, 3, 4, 5, 1 ] ], 1 ) = = [ ( 0, 0 ), ( 1, 4 ), ( 1"]
["def encode _ cyclic ( s : str ) : \" \" \" returns encoded string by cycling groups of three characters. \" \" \" # split string to groups. each of length 3. groups = [ s [ ( 3 * i ) : min ( ( 3 * i + 3 ), len ( s )"]
["the largest of negative integers, and'b'is the smallest of positive integers in a list. if there is no negative or positive integers, return them as none. examples : largest _ smallest _ integers ( [ 2, 4, 1, 3, 5, 7 ] ) = = ( none, 1 ) largest"]
["path of length k means visiting exactly k cells ( not necessarily distinct ). you cannot go off the grid. a path a ( of length k ) is considered less than a path b ( of length k ) if after making the ordered lists of the values on the cells that a and b go through ( let's"]
["sum _ to _ zero ( [ 1, 2, 3, 7 ] ) false > > > pairs _ sum _ to _ zero ( [ 2, 4, - 5, 3, 5, 7 ] ) true > > > pairs _ sum _ to _ zero ( [ 1 ] ) false \" \" \" def"]
["and not a multiple of 3. the function will not change the entries in the list whose indexes are not a multiple of 3 or 4. the function shall then return the sum of all entries. examples : for lst = [ 1, 2, 3 ] the output should be 6 for lst = [ ]"]
[", calculate mean absolute deviation around the mean of this dataset. mean absolute deviation is the average absolute difference between each element and a centerpoint ( mean in this case ) : mad = average | x - x _ mean | > > > mean _ absolute _ deviation ( [ 1. 0, 2. 0, 3"]
["positive integers that start or end with 1. \" \" \" from typing import list def parse _ nested _ parens ( paren _ string : str ) - > list [ int ] : \" \" \" input to this function is a string represented multiple groups for nested parentheses separated by spaces. for each"]
["math def poly ( xs : list, x : float ) : \" \" \" evaluates polynomial with coefficients xs at point x. return xs [ 0 ] + xs [ 1 ] * x + xs [ 1 ] * x ^ 2 +.... xs [ n ] * x"]
["servingslices'is the strongest extension ( its strength is - 1 ). example : for strongest _ extension ('my _ class ', ['aa ','be ','cc'] ) = ='my _ class. aa'\" \" \" def specialfilter ( nums ) :"]
["* ) example : operator ['+ ','* ','-'] array = [ 2, 3, 4, 5 ] result = 2 + 3 * 4 - 5 = > result = 9 note : the length of operator list is equal to the length of operand list minus one. operand"]
["on the cells of the grid. you have to find the minimum path of length k in the grid. you can start from any cell, and in each step you can move to any of the neighbor cells, in other words, you can go to cells which share an edge with you current cell. please note that a"]
["avg ( 1, 5 ) = > \" 0b11 \" rounded _ avg ( 7, 5 ) = > - 1 rounded _ avg ( 10, 20 ) = > \" 0b1111 \" rounded _ avg ( 20, 33 ) = > \" 0b11010 \" \" \""]
["_ a _ letter ( \" \" ) [UNK] false'''def common ( l1 : list, l2 : list ) : \" \" \" return sorted unique common elements for two lists. > > > common ( [ 1, 4, 3, 34, 653, 2, 5 ], [ 5,"]
["* ) example : operator ['+ ','* ','-'] array = [ 2, 3, 4, 5 ] result = 2 + 3 * 4 - 5 = > result = 9 note : the length of operator list is equal to the length of operand list minus one. operand"]
["##mal number as a string and counts the number of hexadecimal digits that are primes ( prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers ). hexadecimal digits are 0, 1, 2, 3, 4,"]
["\" \" \" return only positive numbers in the list. > > > get _ positive ( [ - 1, 2, - 4, 5, 6 ] ) [ 2, 5, 6 ] > > > get _ positive ( [ 5, 3, - 5, 2, - 3, 3, 9, 0"]
["0, 0, 0 ], [ 0, 0, 0 ] ] bucket _ capacity : 5 output : 0 constraints : * all wells have the same length * 1 < = grid. length < = 10 ^ 2 * 1 < = grid [ :, 1 ]. length < = 10 ^ 2 * grid ["]
["= = > \" u \" get _ closest _ vowel ( \" full \" ) = = > \" u \" get _ closest _ vowel ( \" quick \" ) = = > \" \" get _ closest _ vowel ( \" ab \" ) = = > \" \" \" \" \" def compare _ one ( a, b )"]
["studied deeply by mathematicians in the last couple centuries. however, what people don't know is tribonacci sequence. tribonacci sequence is defined by the recurrence : tri ( 1 ) = 3 tri ( n ) = 1 + n / 2, if n is even. tri ( n )"]
["the output should be 0 for lst = [ - 1, - 5, 2, - 1, - 5 ] the output should be - 126 \" \" \" from typing import list def concatenate ( strings : list [ str ] ) - > str : \" \" \" concatenate list of strings"]
["( [ 1 ] ) false \" \" \" def is _ palindrome ( text : str ) : \" \" \" checks if given string is a palindrome > > > is _ palindrome ('' ) true > > > is _ palindrome ('aba')"]
[", 5 ] ) = > [ 0, 1, 2, 3, 4, 5 ] * sort _ array ( [ 2, 4, 3, 0, 1, 5, 6 ] ) = > [ 6, 5, 4, 3, 2, 1, 0 ] \" \" \" def strongest _ extension"]
["is the multiplication of 3 prime numbers and false otherwise. knowing that ( a ) is less then 100. example : is _ multiply _ prime ( 30 ) = = true 30 = 2 * 3 * 5 \" \" \" def truncate _ number ( number : float ) - > float : \" \" \" given"]
[", and your task is to count the number of boredoms. a boredom is a sentence that starts with the word \" i \". sentences are delimited by '. ', '?'or '! '. for example : > > > is _ bored ( \" hello world \" ) 0 > > >"]
["\" \" \" write a function that takes an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits of a number are odd ( 1, 3, 5, 7, 9 ). for example : specialfilter ( [ 15, - 73,"]
["monotonic ( [ 1, 2, 4, 20 ] ) true > > > monotonic ( [ 1, 20, 4, 10 ] ) false > > > monotonic ( [ 4, 1, 0, - 10 ] ) true \" \" \" def add ( lst ) : \" \" \" given a"]
[") = 0, ord ('b') = 1,... ord ('z') = 25 examples split _ words ( \" hello world! \" ) [UNK] [ \" hello \", \" world! \" ] split _ words ( \" hello, world! \" ) [UNK] [ \" hello \""]
["' ) false > > > same _ chars ('abcd ','dddddddabce') false > > > same _ chars ('eabcdzzzz ','dddzzzzzzzddddabc') false \" \" \" def solve ( n ) :"]
["false ) for s = \" abcdedcba \", c = \" ab \", the result should be ('cdedc ', true ) \" \" \" def is _ equal _ to _ sum _ even ( n ) : \" \" \" evaluate whether the given number n can be written as the sum of"]
["is _ bored ( \" the sky is blue. the sun is shining. i love this weather \" ) 1 \" \" \" def find _ max ( words ) : \" \" \" write a function that accepts a list of strings. the list contains different words. return the word with maximum number of unique characters. if multiple"]
["output should be 29 for lst = [ - 2. 4, 1, 1 ] the output should be 6 \" \" \" def pairs _ sum _ to _ zero ( l ) : \" \" \" pairs _ sum _ to _ zero takes a list of integers as an input. it returns true if there are two"]
["k with the maximum k numbers in arr. example 1 : input : arr = [ - 3, - 4, 5 ], k = 3 output : [ - 4, - 3, 5 ] example 2 : input : arr = [ 4, - 4, 4 ], k = 2 output :"]
["the result as a string. if shift > number of digits, return digits reversed. > > > circular _ shift ( 12, 1 ) \" 21 \" > > > circular _ shift ( 12, 2 ) \" 12 \" \" \" \" def check _ if _ last _ char _ is _ a _ letter ( tx"]
[", 0, - 2 ] ) - > [ 4, 4, 1, 0, 0, 6 ] \" \" \" def is _ simple _ power ( x, n ) : \" \" \" your task is to write a function that returns true if a number x is a simple power of n and false in other"]
[", 0 ), ( 2, 5 ), ( 2, 0 ) ] get _ row ( [ ], 1 ) = = [ ] get _ row ( [ [ ], [ 1 ], [ 1, 2, 3 ] ], 3 ) = = [ ( 2, 2 ) ] \" \" \""]
["' ) false > > > same _ chars ('abcd ','dddddddabce') false > > > same _ chars ('eabcdzzzz ','dddzzzzzzzddddabc') false \" \" \" def solve ( n ) :"]
["output should be 10 for lst = [ 1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1 ] the output should be 25 for lst = [ 1, 3, 1, 32"]
["3, 5, 7, 8, 10, 12. and the number of days is not less than 1 or higher than 30 days for months 4, 6, 9, 11. and, the number of days is not less than 1 or higher than 29 for the month 2. 3. the months should not be"]
["odd. note : 1. 1 < = n < = 10 ^ 3 2. returned tuple has the number of even and odd integer palindromes respectively. \" \" \" def make _ a _ pile ( n ) : \" \" \" given a positive integer n, you have to make a pile of n"]
["( class _ name, extensions ) : \" \" \" you will be given the name of a class ( a string ) and a list of extensions. the extensions are to be used to load additional classes to the class. the strength of the extension is as follows : let cap be the number of the uppercase letters in"]
["##fg') returns 0 count _ upper ('dbbe') returns 0 \" \" \" def count _ up _ to ( n ) : \" \" \" implement a function that takes an non - negative integer and returns an array of the first n integers that are prime numbers and less than n. for example :"]
["efficiently compute the n - th element of the fibfib number sequence. > > > fibfib ( 1 ) 0 > > > fibfib ( 5 ) 4 > > > fibfib ( 8 ) 24 \" \" \" def fib ( n : int ) : \" \" \" return n - th"]
["farthest from zero. for example closest _ integer ( \" 14. 5 \" ) should return 15 and closest _ integer ( \" - 14. 5 \" ) should return - 15.'''def is _ multiply _ prime ( a ) : \" \" \" write a function that returns true if the given number"]
["\" def fruit _ distribution ( s, n ) : \" \" \" in this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. given the string that represents the total number of the orange"]
["x1, y1 ), ( x2, y2 )... ] such that each tuple is a coordinate - ( row, columns ), starting with 0. sort coordinates initially by rows in ascending order. also, sort coordinates of the row by columns in descending order. examples : get _ row"]
["path of length k means visiting exactly k cells ( not necessarily distinct ). you cannot go off the grid. a path a ( of length k ) is considered less than a path b ( of length k ) if after making the ordered lists of the values on the cells that a and b go through ( let's"]
["sum _ to _ n ( n : int ) : \" \" \" sum _ to _ n is a function that sums numbers from 1 to n. > > > sum _ to _ n ( 30 ) 465 > > > sum _ to _ n ( 100 ) 5050 > > > sum _ to _ n"]
["- 6x ^ 2 + x ^ 3 1. 0 \" \" \" def count _ upper ( s ) : \" \" \" given a string s, count the number of uppercase vowels in even indices. for example : count _ upper ('abcdef') returns 1 count _ upper ('abcde"]
[", 2. 0, 3. 0, 4. 0, 5. 0, 2. 0 ] ) ( 2. 0, 2. 0 ) \" \" \" def count _ nums ( arr ) : \" \" \" write a function count _ nums which takes an array of integers and returns the number"]
["odd. note : 1. 1 < = n < = 10 ^ 3 2. returned tuple has the number of even and odd integer palindromes respectively. \" \" \" def make _ a _ pile ( n ) : \" \" \" given a positive integer n, you have to make a pile of n"]
["fibonacci number. > > > fib ( 10 ) 55 > > > fib ( 1 ) 1 > > > fib ( 8 ) 21 \" \" \" def x _ or _ y ( n, x, y ) : \" \" \" a simple program which should return the value of x if"]
["i ] [ j ] - > 0 | 1 * 1 < = capacity < = 10 \" \" \" def fibfib ( n : int ) : \" \" \" the fibfib number sequence is a sequence similar to the fibbonacci sequnece that's defined as follows : fibfib"]
["= tri ( n - 1 ) + tri ( n - 2 ) + tri ( n + 1 ), if n is odd. for example : tri ( 2 ) = 1 + ( 2 / 2 ) = 2 tri ( 4 ) = 3 tri ( 3 ) = tri ( 2 ) + tri ( 1 )"]
["a positive floating point number, it can be decomposed into and integer part ( largest integer smaller than given number ) and decimals ( leftover part always smaller than 1 ). return the decimal part of the number. > > > truncate _ number ( 3. 5 ) 0. 5 \" \" \""]
["('aaaaa')'' > > > remove _ vowels ('aabaa')'b'> > > remove _ vowels ('zbcd')'zbcd'\" \" \" def words _ in _ sentence ( sentence ) : \" \" \" you are given a string representing"]
["def encode _ cyclic ( s : str ) : \" \" \" returns encoded string by cycling groups of three characters. \" \" \" # split string to groups. each of length 3. groups = [ s [ ( 3 * i ) : min ( ( 3 * i + 3 ), len ( s )"]
["servingslices'is the strongest extension ( its strength is - 1 ). example : for strongest _ extension ('my _ class ', ['aa ','be ','cc'] ) = ='my _ class. aa'\" \" \" def specialfilter ( nums ) :"]
["non - empty list of integers lst. add the even elements that are at odd indices.. examples : add ( [ 4, 2, 6, 7 ] ) = = > 2 \" \" \" def change _ base ( x : int, base : int ) : \" \" \" change numerical base of input number"]
["ascii value. note : you should keep the order of words and blank spaces in the sentence. for example : anti _ shuffle ('hi') returns'hi'anti _ shuffle ('hello') returns'ehllo'anti _ shuffle ('hello world!!!') returns'hello"]
["i ] [ j ] - > 0 | 1 * 1 < = capacity < = 10 \" \" \" def fibfib ( n : int ) : \" \" \" the fibfib number sequence is a sequence similar to the fibbonacci sequnece that's defined as follows : fibfib"]
["] return \" \". join ( groups ) def decode _ cyclic ( s : str ) : \" \" \" takes as input string encoded with encode _ cyclic function. returns decoded string. \" \" \" def double _ the _ difference ( lst ) :'''given a list of numbers,"]
["[UNK] false is _ sorted ( [ 1, 2, 3, 4, 5, 6 ] ) [UNK] true is _ sorted ( [ 1, 2, 3, 4, 5, 6, 7 ] ) [UNK] true is _ sorted ( [ 1, 3, 2, 4, 5, 6, 7 ] )"]
["''given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should split on commas ','if no commas exists you should return the number of lower - case letters with odd order in the alphabet, ord ('a '"]
[", \" world! \" ] split _ words ( \" abcdef \" ) = = 3'''from typing import list def separate _ paren _ groups ( paren _ string : str ) - > list [ str ] : \" \" \" input to this function is a string containing multiple groups of"]
[", 0, - 2 ] ) - > [ 4, 4, 1, 0, 0, 6 ] \" \" \" def is _ simple _ power ( x, n ) : \" \" \" your task is to write a function that returns true if a number x is a simple power of n and false in other"]
[", - 2, - 3 ] ) = = - 6 \" \" \" def encrypt ( s ) : \" \" \" create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. the alphabet should be rotated in a manner such"]
["> > > same _ chars ('abcd ','dddddddabc') true > > > same _ chars ('dddddddabc ','abcd') true > > > same _ chars ('eabcd ','dddddddabc"]
[")'a'> > > longest ( ['a ','bb ','ccc'] )'ccc'\" \" \" def largest _ smallest _ integers ( lst ) :'''create a function that returns a tuple ( a, b ), where'a'is"]
["the largest of negative integers, and'b'is the smallest of positive integers in a list. if there is no negative or positive integers, return them as none. examples : largest _ smallest _ integers ( [ 2, 4, 1, 3, 5, 7 ] ) = = ( none, 1 ) largest"]
[") : \" \" \" you are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. given lst, and integer x, find integers x in the list, and return list of tuples, [ ("]
[", 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3 ] the output should be 13 for lst = [ 0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0,"]
["6, 24, 15 ] \" \" \" def correct _ bracketing ( brackets : str ) : \" \" \" brackets is a string of \" < \" and \" > \". return true if every opening bracket has a corresponding closing bracket. > > > correct _ bracketing ( \" < \" ) false > >"]
["are driving right to left. the two sets of cars start out being very far from each other. all cars move in the same speed. two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. however, the cars are infinitely sturdy and"]
["of this polynomial in the same form. > > > derivative ( [ 3, 1, 2, 4, 5 ] ) [ 1, 4, 12, 20 ] > > > derivative ( [ 1, 2, 3 ] ) [ 2, 6 ] \" \" \" def cycpattern _ check ( a"]
["smaller number, larger number ). > > > find _ closest _ elements ( [ 1. 0, 2. 0, 3. 0, 4. 0, 5. 0, 2. 2 ] ) ( 2. 0, 2. 2 ) > > > find _ closest _ elements ( [ 1. 0"]
["def decimal _ to _ binary ( decimal ) : \" \" \" you will be given a number in decimal form and your task is to convert it to binary format. the function should return a string, with each character representing a binary number. each character in the string will be'0'or'1 '. there"]
["number < = 1000 * 0 < = need < = 1000 * 0 < = remaining < = 1000 have fun : ) \" \" \" def triples _ sum _ to _ zero ( l : list ) : \" \" \" triples _ sum _ to _ zero takes a list of integers as an input. it returns"]
["the largest of negative integers, and'b'is the smallest of positive integers in a list. if there is no negative or positive integers, return them as none. examples : largest _ smallest _ integers ( [ 2, 4, 1, 3, 5, 7 ] ) = = ( none, 1 ) largest"]
["7, 1, 5, 9, 653, 121 ] ) [ 1, 5, 653 ] > > > common ( [ 5, 3, 2, 8 ], [ 3, 2 ] ) [ 2, 3 ] \" \" \" def valid _ date ( date ) : \" \" \" you have"]
["nested parentheses. your goal is to separate those group into separate strings and return the list of those. separate groups are balanced ( each open brace is properly closed ) and not nested within each other ignore any spaces in the input string. > > > separate _ paren _ groups ('( ) ( ( )"]
["''given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should split on commas ','if no commas exists you should return the number of lower - case letters with odd order in the alphabet, ord ('a '"]
["14, - 15 ] ) = > 1 specialfilter ( [ 33, - 2, - 3, 45, 21, 109 ] ) = > 2 \" \" \" def unique ( l : list ) : \" \" \" return sorted unique elements in a list > > > unique ( [ 5, 3, 5"]
[", 2. 0, 3. 0, 4. 0, 5. 0, 2. 0 ] ) ( 2. 0, 2. 0 ) \" \" \" def count _ nums ( arr ) : \" \" \" write a function count _ nums which takes an array of integers and returns the number"]
["( 4 ) 288 the function will receive an integer as input and should return the special factorial of this integer. \" \" \" from typing import list def remove _ duplicates ( numbers : list [ int ] ) - > list [ int ] : \" \" \" from a list of integers, remove all elements that occur"]
["i ] [ j ] - > 0 | 1 * 1 < = capacity < = 10 \" \" \" def fibfib ( n : int ) : \" \" \" the fibfib number sequence is a sequence similar to the fibbonacci sequnece that's defined as follows : fibfib"]
["will be an extra couple of characters'db'at the beginning and at the end of the string. the extra characters are there to help with the format. examples : decimal _ to _ binary ( 15 ) # returns \" db1111db \" decimal _ to _ binary ( 32 ) # returns \" db10000"]
["3, 4 ] ) ( 10, 24 ) \" \" \" def prime _ fib ( n : int ) : \" \" \" prime _ fib returns n - th number that is a fibonacci number and it's also prime. > > > prime _ fib ( 1 ) 2 > >"]
["i ] [ j ] - > 0 | 1 * 1 < = capacity < = 10 \" \" \" def fibfib ( n : int ) : \" \" \" the fibfib number sequence is a sequence similar to the fibbonacci sequnece that's defined as follows : fibfib"]
["( [ 1, 2, 4, 3, 5 ] ) = 3 can _ arrange ( [ 1, 2, 3 ] ) = - 1 \" \" \" def maximum ( arr, k ) : \" \" \" given an array arr of integers and a positive integer k, return a sorted list of length"]
["strong ; as a result, they continue moving in their trajectory as if they did not collide. this function outputs the number of such collisions. \" \" \" def get _ odd _ collatz ( n ) : \" \" \" given a positive integer n, return a sorted list that has the odd numbers in col"]
["k with the maximum k numbers in arr. example 1 : input : arr = [ - 3, - 4, 5 ], k = 3 output : [ - 4, - 3, 5 ] example 2 : input : arr = [ 4, - 4, 4 ], k = 2 output :"]
[": right _ angle _ triangle ( 3, 4, 5 ) = = true right _ angle _ triangle ( 1, 2, 3 ) = = false'''def triangle _ area ( a, h ) : \" \" \" given length of a side and high return area for a triangle. > > > triangle"]
["\" def fruit _ distribution ( s, n ) : \" \" \" in this task, you will be given a string that represents a number of apples and oranges that are distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. given the string that represents the total number of the orange"]
[") - > int : \" \" \" return a greatest common divisor of two integers a and b > > > greatest _ common _ divisor ( 3, 5 ) 1 > > > greatest _ common _ divisor ( 25, 15 ) 5 \" \" \" def pluck ( arr ) :"]
["list in strange order. strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on. examples : strange _ sort _ list ( [ 1, 2, 3, 4 ] ) = = [ 1, 4, 2, 3 ] strange _ sort _ list"]
["3, 4 ] ) ( 10, 24 ) \" \" \" def prime _ fib ( n : int ) : \" \" \" prime _ fib returns n - th number that is a fibonacci number and it's also prime. > > > prime _ fib ( 1 ) 2 > >"]
[") = 0, ord ('b') = 1,... ord ('z') = 25 examples split _ words ( \" hello world! \" ) [UNK] [ \" hello \", \" world! \" ] split _ words ( \" hello, world! \" ) [UNK] [ \" hello \""]
["6, 24, 15 ] \" \" \" def correct _ bracketing ( brackets : str ) : \" \" \" brackets is a string of \" < \" and \" > \". return true if every opening bracket has a corresponding closing bracket. > > > correct _ bracketing ( \" < \" ) false > >"]
["##latz sequence. the collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows : start with any positive integer n. then each term is obtained from the previous term as follows : if the previous term is even, the next term is one half of the previous term. if the previous term is"]
["x to base. return string representation after the conversion. base numbers are less than 10. > > > change _ base ( 8, 3 )'22'> > > change _ base ( 8, 2 )'1000'> > > change _ base ( 7, 2 )'111'\" \" \" def"]
[") ] for i in range ( ( len ( s ) + 2 ) / / 3 ) ] # cycle elements in each group. unless group has fewer elements than 3. groups = [ ( group [ 1 : ] + group [ 0 ] ) if len ( group ) = = 3 else group for group in groups"]
["( [ - 1, 11, - 11 ] ) = = 1 > > > count _ nums ( [ 1, 1, 2 ] ) = = 3 \" \" \" def do _ algebra ( operator, operand ) : \" \" \" given two lists operator, and operand. the first list has basic"]
[", and your task is to count the number of boredoms. a boredom is a sentence that starts with the word \" i \". sentences are delimited by '. ', '?'or '! '. for example : > > > is _ bored ( \" hello world \" ) 0 > > >"]
["poly ( x ) = 0. find _ zero returns only only zero point, even if there are many. moreover, find _ zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution. > > > round ( find _ zero ( [ 1, 2 ] ),"]
["test \" output : \" is \" example 2 : input : sentence = \" lets go for swimming \" output : \" go for \" constraints : * 1 < = len ( sentence ) < = 100 * sentence contains only letters \" \" \" def fix _ spaces ( text ) : \" \" \" given a string text, replace"]
["to write a function which validates a given date string and returns true if the date is valid otherwise false. the date is valid if all of the following rules are satisfied : 1. the date string is not empty. 2. the number of days is not less than 1 or higher than 31 days for months 1,"]
["triangle. return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. otherwise return - 1 three sides make a valid triangle when the sum of any two sides is greater than the third side. example : triangle _ area ( 3, 4, 5 ) = = 6. 00 triangle"]
["monotonic ( [ 1, 2, 4, 20 ] ) true > > > monotonic ( [ 1, 20, 4, 10 ] ) false > > > monotonic ( [ 4, 1, 0, - 10 ] ) true \" \" \" def add ( lst ) : \" \" \" given a"]
["of elements which has a sum of digits > 0. if a number is negative, then its first signed digit will be negative : e. g. - 123 has signed digits - 1, 2, and 3. > > > count _ nums ( [ ] ) = = 0 > > > count _ nums"]
["> correct _ bracketing ( \" < > \" ) true > > > correct _ bracketing ( \" < < > < > > \" ) true > > > correct _ bracketing ( \" > < < > \" ) false \" \" \" def prod _ signs ( arr ) : \" \" \" you are"]
["strong ; as a result, they continue moving in their trajectory as if they did not collide. this function outputs the number of such collisions. \" \" \" def get _ odd _ collatz ( n ) : \" \" \" given a positive integer n, return a sorted list that has the odd numbers in col"]
["away from zero. examples > > > closest _ integer ( \" 10 \" ) 10 > > > closest _ integer ( \" 15. 3 \" ) 15 note : rounding away from zero means that if the given number is equidistant from two integers, the one you should return is the one that is the"]
["' ) false > > > same _ chars ('abcd ','dddddddabce') false > > > same _ chars ('eabcdzzzz ','dddzzzzzzzddddabc') false \" \" \" def solve ( n ) :"]
["x1, y1 ), ( x2, y2 )... ] such that each tuple is a coordinate - ( row, columns ), starting with 0. sort coordinates initially by rows in ascending order. also, sort coordinates of the row by columns in descending order. examples : get _ row"]
["is a pair of integers. for example, interval = ( start, end ) = ( 1, 2 ). the given intervals are closed which means that the interval ( start, end ) includes both start and end. for each given interval, it is assumed that its start is less or equal its end. your task"]
["containing the result string and true / false for the check. example for s = \" abcde \", c = \" ae \", the result should be ('bcd ', false ) for s = \" abcdef \", c = \" b \" the result should be ('acdef ',"]
[", 5 ) - > [ 7, 0 ] variables : @ number : integer the number of carrots that you have eaten. @ need : integer the number of carrots that you need to eat. @ remaining : integer the number of remaining carrots thet exist in stock constrain : * 0 < ="]
["function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. the function should return an empty tuple if planet1 or planet2 are not correct planet names. examples bf ( \" jupiter \", \" neptune \""]
["7 appears in integers less than n which are divisible by 11 or 13. > > > fizz _ buzz ( 50 ) 0 > > > fizz _ buzz ( 78 ) 2 > > > fizz _ buzz ( 79 ) 3 \" \" \" def compare ( game, guess ) : \" \" \""]
[", - 2, - 3 ] ) = = - 6 \" \" \" def encrypt ( s ) : \" \" \" create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. the alphabet should be rotated in a manner such"]
["3, 2 ) = > false is _ simple _ power ( 3, 1 ) = > false is _ simple _ power ( 5, 3 ) = > false \" \" \" def strlen ( string : str ) - > int : \" \" \" return length of given string > > > strlen"]
["the result as a string. if shift > number of digits, return digits reversed. > > > circular _ shift ( 12, 1 ) \" 21 \" > > > circular _ shift ( 12, 2 ) \" 12 \" \" \" \" def check _ if _ last _ char _ is _ a _ letter ( tx"]
[", calculate mean absolute deviation around the mean of this dataset. mean absolute deviation is the average absolute difference between each element and a centerpoint ( mean in this case ) : mad = average | x - x _ mean | > > > mean _ absolute _ deviation ( [ 1. 0, 2. 0, 3"]
["farthest from zero. for example closest _ integer ( \" 14. 5 \" ) should return 15 and closest _ integer ( \" - 14. 5 \" ) should return - 15.'''def is _ multiply _ prime ( a ) : \" \" \" write a function that returns true if the given number"]
["the result as a string. if shift > number of digits, return digits reversed. > > > circular _ shift ( 12, 1 ) \" 21 \" > > > circular _ shift ( 12, 2 ) \" 12 \" \" \" \" def check _ if _ last _ char _ is _ a _ letter ( tx"]
["( 5 ) 15 > > > sum _ to _ n ( 10 ) 55 > > > sum _ to _ n ( 1 ) 1 \" \" \" def get _ closest _ vowel ( word ) : \" \" \" you are given a word. your task is to find the closest vowel that stands between two consonants from"]
["7 appears in integers less than n which are divisible by 11 or 13. > > > fizz _ buzz ( 50 ) 0 > > > fizz _ buzz ( 78 ) 2 > > > fizz _ buzz ( 79 ) 3 \" \" \" def compare ( game, guess ) : \" \" \""]
[")'a'> > > longest ( ['a ','bb ','ccc'] )'ccc'\" \" \" def largest _ smallest _ integers ( lst ) :'''create a function that returns a tuple ( a, b ), where'a'is"]
[") : \" \" \" you are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. given lst, and integer x, find integers x in the list, and return list of tuples, [ ("]
["than 1 duplicate of the same number, return false. assume no negative numbers and only integers. examples is _ sorted ( [ 5 ] ) [UNK] true is _ sorted ( [ 1, 2, 3, 4, 5 ] ) [UNK] true is _ sorted ( [ 1, 3, 2, 4, 5 ] )"]
["( [ - 1, 11, - 11 ] ) = = 1 > > > count _ nums ( [ 1, 1, 2 ] ) = = 3 \" \" \" def do _ algebra ( operator, operand ) : \" \" \" given two lists operator, and operand. the first list has basic"]
["5, 6 ] the output should be 11 for lst = [ 0, 81, 12, 3, 1, 21 ] the output should be 3 for lst = [ 0, 8, 1, 2, 1, 7 ] the output should be 7 \" \" \" def median ( l : list ) :"]
["strings have maximum number of unique characters, return the one which comes first in lexicographical order. find _ max ( [ \" name \", \" of \", \" string \" ] ) = = \" string \" find _ max ( [ \" name \", \" enam \", \" game \" ] ) ="]
[", 0, - 2 ] ) - > [ 4, 4, 1, 0, 0, 6 ] \" \" \" def is _ simple _ power ( x, n ) : \" \" \" your task is to write a function that returns true if a number x is a simple power of n and false in other"]
[", 4 ) ) = = > \" no \" intersection ( ( - 3, - 1 ), ( - 5, 5 ) ) = = > \" yes \" \" \" \" def hex _ key ( num ) : \" \" \" you have been tasked to write a function that receives a hexadeci"]
["efficiently compute the n - th element of the fibfib number sequence. > > > fibfib ( 1 ) 0 > > > fibfib ( 5 ) 4 > > > fibfib ( 8 ) 24 \" \" \" def fib ( n : int ) : \" \" \" return n - th"]
["[UNK] false is _ sorted ( [ 1, 2, 3, 4, 5, 6 ] ) [UNK] true is _ sorted ( [ 1, 2, 3, 4, 5, 6, 7 ] ) [UNK] true is _ sorted ( [ 1, 3, 2, 4, 5, 6, 7 ] )"]
["- 3, - 2 ] > > > sort _ array ( [ 1, 0, 2, 3, 4 ] ) [ 0, 1, 2, 3, 4 ] \" \" \" from typing import list, optional def longest ( strings : list [ str ] ) - > optional [ str ] :"]
["servingslices'is the strongest extension ( its strength is - 1 ). example : for strongest _ extension ('my _ class ', ['aa ','be ','cc'] ) = ='my _ class. aa'\" \" \" def specialfilter ( nums ) :"]
["[ i ] + a [ j ] + a [ k ] is a multiple of 3. example : input : n = 5 output : 1 explanation : a = [ 1, 3, 7, 13, 21 ] the only valid triple is ( 1, 7, 13 ). \" \" \" def bf ( planet"]
["the largest prime value and return the sum of its digits. examples : for lst = [ 0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3 ] the"]
["hello \", \" ell \" ) = > true cycpattern _ check ( \" whassup \", \" psus \" ) = > false cycpattern _ check ( \" abab \", \" baa \" ) = > true cycpattern _ check ( \" efef"]
[", 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3 ] the output should be 13 for lst = [ 0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0,"]
["14, - 15 ] ) = > 1 specialfilter ( [ 33, - 2, - 3, 45, 21, 109 ] ) = > 2 \" \" \" def unique ( l : list ) : \" \" \" return sorted unique elements in a list > > > unique ( [ 5, 3, 5"]
["##s, but will still be hungry. example : * eat ( 5, 6, 10 ) - > [ 11, 4 ] * eat ( 4, 8, 9 ) - > [ 12, 1 ] * eat ( 1, 10, 10 ) - > [ 11, 0 ] * eat ( 2, 11"]
["nested parentheses. your goal is to separate those group into separate strings and return the list of those. separate groups are balanced ( each open brace is properly closed ) and not nested within each other ignore any spaces in the input string. > > > separate _ paren _ groups ('( ) ( ( )"]
[", 0, - 2 ] ) - > [ 4, 4, 1, 0, 0, 6 ] \" \" \" def is _ simple _ power ( x, n ) : \" \" \" your task is to write a function that returns true if a number x is a simple power of n and false in other"]
["> 0 fib4 ( n ) - > fib4 ( n - 1 ) + fib4 ( n - 2 ) + fib4 ( n - 3 ) + fib4 ( n - 4 ). please write a function to efficiently compute the n - th element of the fib4 number"]
[", 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3 ] the output should be 13 for lst = [ 0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0,"]
["2 : input : grid : [ [ 0, 0, 1, 1 ], [ 0, 0, 0, 0 ], [ 1, 1, 1, 1 ], [ 0, 1, 1, 1 ] ] bucket _ capacity : 2 output : 5 example 3 : input : grid : [ ["]
["test \" output : \" is \" example 2 : input : sentence = \" lets go for swimming \" output : \" go for \" constraints : * 1 < = len ( sentence ) < = 100 * sentence contains only letters \" \" \" def fix _ spaces ( text ) : \" \" \" given a string text, replace"]
["\" def largest _ divisor ( n : int ) - > int : \" \" \" for a given number n, find the largest number that divides n evenly, smaller than n > > > largest _ divisor ( 15 ) 5 \" \" \" from typing import list, any def filter _ integers ( values"]
["7, 1, 5, 9, 653, 121 ] ) [ 1, 5, 653 ] > > > common ( [ 5, 3, 2, 8 ], [ 3, 2 ] ) [ 2, 3 ] \" \" \" def valid _ date ( date ) : \" \" \" you have"]
["true if there are three distinct elements in the list that sum to zero, and false otherwise. > > > triples _ sum _ to _ zero ( [ 1, 3, 5, 0 ] ) false > > > triples _ sum _ to _ zero ( [ 1, 3, - 2, 1 ]"]
["- 6x ^ 2 + x ^ 3 1. 0 \" \" \" def count _ upper ( s ) : \" \" \" given a string s, count the number of uppercase vowels in even indices. for example : count _ upper ('abcdef') returns 1 count _ upper ('abcde"]
["7, 1, 5, 9, 653, 121 ] ) [ 1, 5, 653 ] > > > common ( [ 5, 3, 2, 8 ], [ 3, 2 ] ) [ 2, 3 ] \" \" \" def valid _ date ( date ) : \" \" \" you have"]
["def encode _ cyclic ( s : str ) : \" \" \" returns encoded string by cycling groups of three characters. \" \" \" # split string to groups. each of length 3. groups = [ s [ ( 3 * i ) : min ( ( 3 * i + 3 ), len ( s )"]
["> > > same _ chars ('abcd ','dddddddabc') true > > > same _ chars ('dddddddabc ','abcd') true > > > same _ chars ('eabcd ','dddddddabc"]
["the result as a string. if shift > number of digits, return digits reversed. > > > circular _ shift ( 12, 1 ) \" 21 \" > > > circular _ shift ( 12, 2 ) \" 12 \" \" \" \" def check _ if _ last _ char _ is _ a _ letter ( tx"]
["3, 2 ) = > false is _ simple _ power ( 3, 1 ) = > false is _ simple _ power ( 5, 3 ) = > false \" \" \" def strlen ( string : str ) - > int : \" \" \" return length of given string > > > strlen"]
["elements in the array will be in the range of [ - 1000, 1000 ]. 3. 0 < = k < = len ( arr ) \" \" \" from typing import list def intersperse ( numbers : list [ int ], delimeter : int ) - > list [ int ] : \" \" \""]
["operations on a bank account that starts with zero balance. your task is to detect if at any point the balance of account fallls below zero, and at that point function should return true. otherwise it should return false. > > > below _ zero ( [ 1, 2, 3 ] ) false > > > below"]
["= \" enam \" find _ max ( [ \" aaaaaaa \", \" bb \", \" cc \" ] ) = = \" \" aaaaaaa \" \" \" \" def monotonic ( l : list ) : \" \" \" return true is list elements are monotonically increasing or decreasing. > > >"]
[") = 0, ord ('b') = 1,... ord ('z') = 25 examples split _ words ( \" hello world! \" ) [UNK] [ \" hello \", \" world! \" ] split _ words ( \" hello, world! \" ) [UNK] [ \" hello \""]
[") : \" \" \" you are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. given lst, and integer x, find integers x in the list, and return list of tuples, [ ("]
["\" \" \" out of list of strings, return the longest one. return the first one in case of multiple strings of the same length. return none in case the input list is empty. > > > longest ( [ ] ) > > > longest ( ['a ','b ','c']"]
["\" \" \" out of list of strings, return the longest one. return the first one in case of multiple strings of the same length. return none in case the input list is empty. > > > longest ( [ ] ) > > > longest ( ['a ','b ','c']"]
["def search ( lst ) :'''you are given a non - empty list of positive integers. return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. the frequency of an integer is the number of times it appears in the list."]
[": right _ angle _ triangle ( 3, 4, 5 ) = = true right _ angle _ triangle ( 1, 2, 3 ) = = false'''def triangle _ area ( a, h ) : \" \" \" given length of a side and high return area for a triangle. > > > triangle"]
["factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i ( 1 * 2 *... * i ). example : f ( 5 ) = = [ 1, 2,"]
["def order _ by _ points ( nums ) : \" \" \" write a function which sorts the given list of integers in ascending order according to the sum of their digits. note : if there are several items with similar sum of their digits, order them based on their index in original list. for example : > >"]
["2, 3 ) 5 > > > add ( 5, 7 ) 12 \" \" \" def prime _ length ( string ) : \" \" \" write a function that takes a string and returns true if the string length is a prime number or false otherwise examples prime _ length ('hello') = = true prime _"]
["\" \" \" return median of elements in the list l. > > > median ( [ 3, 1, 2, 4, 5 ] ) 3 > > > median ( [ - 10, 4, 6, 1000, 10, 20 ] ) 15. 0 \" \" \" def sorted _ list _ sum ( l"]
["the extension's name, and let sm be the number of lowercase letters in the extension's name, the strength is given by the fraction cap - sm. you should find the strongest extension and return a string in this format : classname. strongestextensionname. if there are two or more extensions with"]
["def decimal _ to _ binary ( decimal ) : \" \" \" you will be given a number in decimal form and your task is to convert it to binary format. the function should return a string, with each character representing a binary number. each character in the string will be'0'or'1 '. there"]
["##se _ music ('o o |. | o | o |. |. |. |. | o o') [ 4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4 ] \" \" \" def reverse _ delete ( s, c ) : \""]
[")'a'> > > longest ( ['a ','bb ','ccc'] )'ccc'\" \" \" def largest _ smallest _ integers ( lst ) :'''create a function that returns a tuple ( a, b ), where'a'is"]
["shift function. returns decoded string. \" \" \" def sum _ squares ( lst ) : \" \" \" you are given a list of numbers. you need to return the sum of squared numbers in the given list, round each element in the list to the upper int ( ceiling ) first. examples : for l"]
["( 5 ) 15 > > > sum _ to _ n ( 10 ) 55 > > > sum _ to _ n ( 1 ) 1 \" \" \" def get _ closest _ vowel ( word ) : \" \" \" you are given a word. your task is to find the closest vowel that stands between two consonants from"]
["a _ letter ( \" apple pie \" ) [UNK] false check _ if _ last _ char _ is _ a _ letter ( \" apple pi e \" ) [UNK] true check _ if _ last _ char _ is _ a _ letter ( \" apple pi e \" ) [UNK] false check _ if _ last _ char _ is"]
[") ] for i in range ( ( len ( s ) + 2 ) / / 3 ) ] # cycle elements in each group. unless group has fewer elements than 3. groups = [ ( group [ 1 : ] + group [ 0 ] ) if len ( group ) = = 3 else group for group in groups"]
["if no such a value exist, return - 1. examples : search ( [ 4, 1, 2, 2, 3, 1 ] ) = = 2 search ( [ 1, 2, 2, 3, 3, 3, 4, 4, 4 ] ) = = 3 search ( [ 5, 5,"]
["##c62'\" \" \" def is _ prime ( n ) : \" \" \" return true if a given number is prime, and false otherwise. > > > is _ prime ( 6 ) false > > > is _ prime ( 101 ) true > > > is _ prime ( 11 ) true > > >"]
["('aaaaa')'' > > > remove _ vowels ('aabaa')'b'> > > remove _ vowels ('zbcd')'zbcd'\" \" \" def words _ in _ sentence ( sentence ) : \" \" \" you are given a string representing"]
["i ] [ j ] - > 0 | 1 * 1 < = capacity < = 10 \" \" \" def fibfib ( n : int ) : \" \" \" the fibfib number sequence is a sequence similar to the fibbonacci sequnece that's defined as follows : fibfib"]
["number < = 1000 * 0 < = need < = 1000 * 0 < = remaining < = 1000 have fun : ) \" \" \" def triples _ sum _ to _ zero ( l : list ) : \" \" \" triples _ sum _ to _ zero takes a list of integers as an input. it returns"]
[": \" \" \" given a string, find out how many distinct characters ( regardless of case ) does it consist of > > > count _ distinct _ characters ('xyzxyz') 3 > > > count _ distinct _ characters ('jerry') 4 \" \" \" def solve ( s ) :"]
["[UNK] false is _ sorted ( [ 1, 2, 2, 3, 3, 4 ] ) [UNK] true is _ sorted ( [ 1, 2, 2, 2, 3, 4 ] ) [UNK] false'''def tri ( n ) : \" \" \" everyone knows fibonacci sequence, it was"]
[", 4 ) ) = = > \" no \" intersection ( ( - 3, - 1 ), ( - 5, 5 ) ) = = > \" yes \" \" \" \" def hex _ key ( num ) : \" \" \" you have been tasked to write a function that receives a hexadeci"]
["the largest prime value and return the sum of its digits. examples : for lst = [ 0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3 ] the"]
["', return its md5 hash equivalent string. if'text'is an empty string, return none. > > > string _ to _ md5 ('hello world') = ='3e25960a79dbc69b674cd4ec67a72"]
["4, 4, 4 ] ) = = - 1'''def correct _ bracketing ( brackets : str ) : \" \" \" brackets is a string of \" ( \" and \" ) \". return true if every opening bracket has a corresponding closing bracket. > > > correct _ bracketing ( \" ("]
["( 5 ) 15 > > > sum _ to _ n ( 10 ) 55 > > > sum _ to _ n ( 1 ) 1 \" \" \" def get _ closest _ vowel ( word ) : \" \" \" you are given a word. your task is to find the closest vowel that stands between two consonants from"]
["output should be 10 for lst = [ 1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1 ] the output should be 25 for lst = [ 1, 3, 1, 32"]
["containing the result string and true / false for the check. example for s = \" abcde \", c = \" ae \", the result should be ('bcd ', false ) for s = \" abcdef \", c = \" b \" the result should be ('acdef ',"]
["monotonic ( [ 1, 2, 4, 20 ] ) true > > > monotonic ( [ 1, 20, 4, 10 ] ) false > > > monotonic ( [ 4, 1, 0, - 10 ] ) true \" \" \" def add ( lst ) : \" \" \" given a"]
["node. value \" \" \" def sum _ squares ( lst ) : \" \" \" \" this function will take a list of integers. for all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4"]
["task is to parse this string and return list of integers corresponding to how many beats does each not last. here is a legend :'o'- whole note, lasts four beats'o |'- half note, lasts two beats '. |'- quater note, lasts one beat > > > par"]
["##t ) :'''create a function that returns true if the last character of a given string is an alphabetical character and is not a part of a word, and false otherwise. note : \" word \" is a group of characters separated by space. examples : check _ if _ last _ char _ is _"]
["\" \" \" out of list of strings, return the longest one. return the first one in case of multiple strings of the same length. return none in case the input list is empty. > > > longest ( [ ] ) > > > longest ( ['a ','b ','c']"]
["3, 4 ] ) ( 10, 24 ) \" \" \" def prime _ fib ( n : int ) : \" \" \" prime _ fib returns n - th number that is a fibonacci number and it's also prime. > > > prime _ fib ( 1 ) 2 > >"]
["saturn \" )'''def anti _ shuffle ( s ) : \" \" \" write a function that takes a string and returns an ordered version of it. ordered version of string, is a string where all words ( separated by space ) are replaced by a new word where all the characters arranged in ascending order based on"]
["are driving right to left. the two sets of cars start out being very far from each other. all cars move in the same speed. two cars are said to collide when a car that's moving left to right hits a car that's moving right to left. however, the cars are infinitely sturdy and"]
["monotonic ( [ 1, 2, 4, 20 ] ) true > > > monotonic ( [ 1, 20, 4, 10 ] ) false > > > monotonic ( [ 4, 1, 0, - 10 ] ) true \" \" \" def add ( lst ) : \" \" \" given a"]
["[ i ] + a [ j ] + a [ k ] is a multiple of 3. example : input : n = 5 output : 1 explanation : a = [ 1, 3, 7, 13, 21 ] the only valid triple is ( 1, 7, 13 ). \" \" \" def bf ( planet"]
["odd. note : 1. 1 < = n < = 10 ^ 3 2. returned tuple has the number of even and odd integer palindromes respectively. \" \" \" def make _ a _ pile ( n ) : \" \" \" given a positive integer n, you have to make a pile of n"]
["integers, return a tuple consisting of a sum and a product of all the integers in a list. empty sum should be equal to 0 and empty product should be equal to 1. > > > sum _ product ( [ ] ) ( 0, 1 ) > > > sum _ product ( [ 1, 2,"]
["def iscube ( a ) :'''write a function that takes an integer a and returns true if this ingeger is a cube of some integer number. note : you may assume the input is always valid. examples : iscube ( 1 ) = = > true iscube ( 2 ) ="]
["and not a multiple of 3. the function will not change the entries in the list whose indexes are not a multiple of 3 or 4. the function shall then return the sum of all entries. examples : for lst = [ 1, 2, 3 ] the output should be 6 for lst = [ ]"]
["[ chr ( ( ( ord ( ch ) + 5 - ord ( \" a \" ) ) % 26 ) + ord ( \" a \" ) ) for ch in s ] ) def decode _ shift ( s : str ) : \" \" \" takes as input string encoded with encode _"]
["\" ) false > > > correct _ bracketing ( \" ( ) \" ) true > > > correct _ bracketing ( \" ( ( ) ( ) ) \" ) true > > > correct _ bracketing ( \" ) ( ( ) \" ) false \" \" \" def split _ words ( txt ) : '"]
["_ a _ letter ( \" \" ) [UNK] false'''def common ( l1 : list, l2 : list ) : \" \" \" return sorted unique common elements for two lists. > > > common ( [ 1, 4, 3, 34, 653, 2, 5 ], [ 5,"]
["index value, last index value ) is even. note : * don't change the given array. examples : * sort _ array ( [ ] ) = > [ ] * sort _ array ( [ 5 ] ) = > [ 5 ] * sort _ array ( [ 2, 4, 3, 0, 1"]
[") - > int : \" \" \" return a greatest common divisor of two integers a and b > > > greatest _ common _ divisor ( 3, 5 ) 1 > > > greatest _ common _ divisor ( 25, 15 ) 5 \" \" \" def pluck ( arr ) :"]
["of the group, output the deepest level of nesting of parentheses. e. g. ( ( ) ( ) ) has maximum two levels of nesting while ( ( ( ) ) ) has three. > > > parse _ nested _ parens ('( ( ) ( ) ) ( ( ( ) ) )"]
["\" def largest _ divisor ( n : int ) - > int : \" \" \" for a given number n, find the largest number that divides n evenly, smaller than n > > > largest _ divisor ( 15 ) 5 \" \" \" from typing import list, any def filter _ integers ( values"]
[": right _ angle _ triangle ( 3, 4, 5 ) = = true right _ angle _ triangle ( 1, 2, 3 ) = = false'''def triangle _ area ( a, h ) : \" \" \" given length of a side and high return area for a triangle. > > > triangle"]
["1 oranges \", 3 ) - > 3 - 0 - 1 = 2 fruit _ distribution ( \" 2 apples and 3 oranges \", 100 ) - > 100 - 2 - 3 = 95 fruit _ distribution ( \" 100 apples and 1 oranges \", 120 ) - > 120 - 100 - 1 = 19"]
["n is a prime number and should return the value of y otherwise. examples : for x _ or _ y ( 7, 34, 12 ) = = 34 for x _ or _ y ( 15, 8, 5 ) = = 5 \" \" \" def solution ( lst ) : \" \" \" given a non"]
["##r ) - > int : \" \" \" find how many times a given substring can be found in the original string. count overlaping cases. > > > how _ many _ times ('','a') 0 > > > how _ many _ times ('aaa ','a '"]
["servingslices'is the strongest extension ( its strength is - 1 ). example : for strongest _ extension ('my _ class ', ['aa ','be ','cc'] ) = ='my _ class. aa'\" \" \" def specialfilter ( nums ) :"]
["[ 4, 4 ] example 3 : input : arr = [ - 3, 2, 1, 2, - 1, - 2, 1 ], k = 1 output : [ 2 ] note : 1. the length of the array will be in the range of [ 1, 1000 ]. 2. the"]
["[ chr ( ( ( ord ( ch ) + 5 - ord ( \" a \" ) ) % 26 ) + ord ( \" a \" ) ) for ch in s ] ) def decode _ shift ( s : str ) : \" \" \" takes as input string encoded with encode _"]
[") = = > ( \" saturn \", \" uranus \" ) bf ( \" earth \", \" mercury \" ) = = > ( \" venus \" ) bf ( \" mercury \", \" uranus \" ) = = > ( \" venus \", \" earth \", \" mars \", \" jupiter \", \""]
["1 oranges \", 3 ) - > 3 - 0 - 1 = 2 fruit _ distribution ( \" 2 apples and 3 oranges \", 100 ) - > 100 - 2 - 3 = 95 fruit _ distribution ( \" 100 apples and 1 oranges \", 120 ) - > 120 - 100 - 1 = 19"]
["] return \" \". join ( groups ) def decode _ cyclic ( s : str ) : \" \" \" takes as input string encoded with encode _ cyclic function. returns decoded string. \" \" \" def double _ the _ difference ( lst ) :'''given a list of numbers,"]
["task is to parse this string and return list of integers corresponding to how many beats does each not last. here is a legend :'o'- whole note, lasts four beats'o |'- half note, lasts two beats '. |'- quater note, lasts one beat > > > par"]
[": \" \" \" create a function that takes integers, floats, or strings representing real numbers, and returns the larger variable in its given variable type. return none if the values are equal. note : if a real number is represented as a string, the floating point might be. or, compare _ one ( 1,"]
["farthest from zero. for example closest _ integer ( \" 14. 5 \" ) should return 15 and closest _ integer ( \" - 14. 5 \" ) should return - 15.'''def is _ multiply _ prime ( a ) : \" \" \" write a function that returns true if the given number"]
["odd. note : 1. 1 < = n < = 10 ^ 3 2. returned tuple has the number of even and odd integer palindromes respectively. \" \" \" def make _ a _ pile ( n ) : \" \" \" given a positive integer n, you have to make a pile of n"]
["', { }, [ ] ] ) [ 1, 2, 3 ] \" \" \" def generate _ integers ( a, b ) : \" \" \" given two positive integers a and b, return the even digits between a and b, in ascending order. for example : generate _ integers ( 2, 8 )"]
["fibonacci number. > > > fib ( 10 ) 55 > > > fib ( 1 ) 1 > > > fib ( 8 ) 21 \" \" \" def x _ or _ y ( n, x, y ) : \" \" \" a simple program which should return the value of x if"]
[", 3 ] ) [ 1, 2, 3 ] > > > sort _ third ( [ 5, 6, 3, 4, 8, 9, 2 ] ) [ 2, 6, 3, 4, 8, 9, 5 ] \" \" \" def encode ( message ) : \" \" \" write a"]
[": \" \" \" given a string, find out how many distinct characters ( regardless of case ) does it consist of > > > count _ distinct _ characters ('xyzxyz') 3 > > > count _ distinct _ characters ('jerry') 4 \" \" \" def solve ( s ) :"]
["insert a number'delimeter'between every two consecutive elements of input list ` numbers'> > > intersperse ( [ ], 4 ) [ ] > > > intersperse ( [ 1, 2, 3 ], 4 ) [ 1, 4, 2, 4, 3 ] \" \" \" import"]
[": assert list _ sort ( [ \" aa \", \" a \", \" aaa \" ] ) = > [ \" aa \" ] assert list _ sort ( [ \" ab \", \" a \", \" aaa \", \" cd \" ] ) = > [ \" ab \", \" cd \" ] \" \" \""]
["i ] [ j ] - > 0 | 1 * 1 < = capacity < = 10 \" \" \" def fibfib ( n : int ) : \" \" \" the fibfib number sequence is a sequence similar to the fibbonacci sequnece that's defined as follows : fibfib"]
["odd. note : 1. 1 < = n < = 10 ^ 3 2. returned tuple has the number of even and odd integer palindromes respectively. \" \" \" def make _ a _ pile ( n ) : \" \" \" given a positive integer n, you have to make a pile of n"]
["( class _ name, extensions ) : \" \" \" you will be given the name of a class ( a string ) and a list of extensions. the extensions are to be used to load additional classes to the class. the strength of the extension is as follows : let cap be the number of the uppercase letters in"]
[") = 0, ord ('b') = 1,... ord ('z') = 25 examples split _ words ( \" hello world! \" ) [UNK] [ \" hello \", \" world! \" ] split _ words ( \" hello, world! \" ) [UNK] [ \" hello \""]
["( [ - 1, 11, - 11 ] ) = = 1 > > > count _ nums ( [ 1, 1, 2 ] ) = = 3 \" \" \" def do _ algebra ( operator, operand ) : \" \" \" given two lists operator, and operand. the first list has basic"]
["node. value \" \" \" def sum _ squares ( lst ) : \" \" \" \" this function will take a list of integers. for all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4"]
["##0db \" \" \" \" def minpath ( grid, k ) : \" \" \" given a grid with n rows and n columns ( n > = 2 ) and a positive integer k, each cell of the grid contains a value. every integer in the range [ 1, n * n ] inclusive appears exactly once"]
["strong ; as a result, they continue moving in their trajectory as if they did not collide. this function outputs the number of such collisions. \" \" \" def get _ odd _ collatz ( n ) : \" \" \" given a positive integer n, return a sorted list that has the odd numbers in col"]
["servingslices'is the strongest extension ( its strength is - 1 ). example : for strongest _ extension ('my _ class ', ['aa ','be ','cc'] ) = ='my _ class. aa'\" \" \" def specialfilter ( nums ) :"]
["output should be 29 for lst = [ - 2. 4, 1, 1 ] the output should be 6 \" \" \" def pairs _ sum _ to _ zero ( l ) : \" \" \" pairs _ sum _ to _ zero takes a list of integers as an input. it returns true if there are two"]
["> prime _ fib ( 2 ) 3 > > > prime _ fib ( 3 ) 5 > > > prime _ fib ( 4 ) 13 > > > prime _ fib ( 5 ) 89 \" \" \" def string _ to _ md5 ( text ) : \" \" \" given a string'text"]
["##latz ( 5 ) returns [ 1, 5 ] # the collatz sequence for 5 is [ 5, 16, 8, 4, 2, 1 ], so the odd numbers are only 1, and 5. \" \" \" def even _ odd _ palindrome ( n ) : \" \" \""]
["given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range ( 1, n ), inclusive. example 1 : input : 3 output : ( 1, 2 ) explanation : integer palindrome are 1, 2, 3. one"]
["more than once. keep order of elements left the same as in the input. > > > remove _ duplicates ( [ 1, 2, 3, 2, 4 ] ) [ 1, 3, 4 ] \" \" \" def digits ( n ) : \" \" \" given a positive integer n, return the product"]
["algebra operations, and the second list is a list of integers. use the two given lists to build the algebric expression and return the evaluation of this expression. the basic algebra operations : addition ( + ) subtraction ( - ) multiplication ( * ) floor division ( / / ) exponentiation ( *"]
[", 0 ), ( 2, 5 ), ( 2, 0 ) ] get _ row ( [ ], 1 ) = = [ ] get _ row ( [ [ ], [ 1 ], [ 1, 2, 3 ] ], 3 ) = = [ ( 2, 2 ) ] \" \" \""]
["the level ( i + 1 ). examples : > > > make _ a _ pile ( 3 ) [ 3, 5, 7 ] \" \" \" def is _ sorted ( lst ) :'''given a list of numbers, return whether or not they are sorted in ascending order. if list has more"]
["##st ) : \" \" \" write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order, the list is always a list of strings and never an array of numbers, and it may contain duplicates. the"]
[", - 2, - 3 ] ) = = - 6 \" \" \" def encrypt ( s ) : \" \" \" create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. the alphabet should be rotated in a manner such"]
["##s to a whole number and false otherwise. both x and n, are string representation of a fraction, and have the following format, < numerator > / < denominator > where both numerator and denominator are positive whole numbers. you can assume that x, and n are valid fractions"]
["list in strange order. strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on. examples : strange _ sort _ list ( [ 1, 2, 3, 4 ] ) = = [ 1, 4, 2, 3 ] strange _ sort _ list"]
["def search ( lst ) :'''you are given a non - empty list of positive integers. return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. the frequency of an integer is the number of times it appears in the list."]
["algebra operations, and the second list is a list of integers. use the two given lists to build the algebric expression and return the evaluation of this expression. the basic algebra operations : addition ( + ) subtraction ( - ) multiplication ( * ) floor division ( / / ) exponentiation ( *"]
["return the sum of squares of the numbers in the list that are odd. ignore numbers that are negative or not integers. double _ the _ difference ( [ 1, 3, 2, 0 ] ) = = 1 + 9 + 0 + 0 = 10 double _ the _ difference ( [ - 1, - 2,"]
["2, - 4 ] ) = = - 9 > > > prod _ signs ( [ 0, 1 ] ) = = 0 > > > prod _ signs ( [ ] ) = = none \" \" \" def strange _ sort _ list ( lst ) :'''given list of integers, return"]
[", 0, - 2 ] ) - > [ 4, 4, 1, 0, 0, 6 ] \" \" \" def is _ simple _ power ( x, n ) : \" \" \" your task is to write a function that returns true if a number x is a simple power of n and false in other"]
["def order _ by _ points ( nums ) : \" \" \" write a function which sorts the given list of integers in ascending order according to the sum of their digits. note : if there are several items with similar sum of their digits, order them based on their index in original list. for example : > >"]
["= > false iscube ( - 1 ) = = > true iscube ( 64 ) = = > true iscube ( 0 ) = = > true iscube ( 180 ) = = > false'''def how _ many _ times ( string : str, substring : st"]
["output should be 10 for lst = [ 1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1 ] the output should be 25 for lst = [ 1, 3, 1, 32"]
["operations on a bank account that starts with zero balance. your task is to detect if at any point the balance of account fallls below zero, and at that point function should return true. otherwise it should return false. > > > below _ zero ( [ 1, 2, 3 ] ) false > > > below"]
["14, - 15 ] ) = > 1 specialfilter ( [ 33, - 2, - 3, 45, 21, 109 ] ) = > 2 \" \" \" def unique ( l : list ) : \" \" \" return sorted unique elements in a list > > > unique ( [ 5, 3, 5"]
[": list [ any ] ) - > list [ int ] : \" \" \" filter given list of any python values only for integers > > > filter _ integers ( ['a ', 3. 14, 5 ] ) [ 5 ] > > > filter _ integers ( [ 1, 2, 3,'abc"]
["the level ( i + 1 ). examples : > > > make _ a _ pile ( 3 ) [ 3, 5, 7 ] \" \" \" def is _ sorted ( lst ) :'''given a list of numbers, return whether or not they are sorted in ascending order. if list has more"]
["_ smallest _ integers ( [ ] ) = = ( none, none ) largest _ smallest _ integers ( [ 0 ] ) = = ( none, none )'''def modp ( n : int, p : int ) : \" \" \" return 2 ^ n modulo p ( be aware of numeric"]
["7, 1, 5, 9, 653, 121 ] ) [ 1, 5, 653 ] > > > common ( [ 5, 3, 2, 8 ], [ 3, 2 ] ) [ 2, 3 ] \" \" \" def valid _ date ( date ) : \" \" \" you have"]
[", 321 ] ) = = > 0 \" \" \" def digitsum ( s ) : \" \" \" task write a function that takes a string as input and returns the sum of the upper characters only'ascii codes. examples : digitsum ( \" \" ) = > 0 digitsum ( \" abab \""]
[". 0, 4. 0 ] ) 1. 0 \" \" \" def string _ sequence ( n : int ) - > str : \" \" \" return a string containing space - delimited numbers starting from 0 upto n inclusive. > > > string _ sequence ( 0 )'0'> > >"]
[") : \" \" \" you are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. given lst, and integer x, find integers x in the list, and return list of tuples, [ ("]
[", 2, 3 ], 1 ) [UNK] false # it's balanced, but 3 + 2 + 3 is more than the maximum possible weight. will _ it _ fly ( [ 3, 2, 3 ], 9 ) [UNK] true # 3 + 2 + 3 is less than the maximum possible weight, and it"]
["\" \" \" \" given an array representing a branch of a tree that has non - negative integer nodes your task is to pluck one of the nodes and return it. the plucked node should be the node with the smallest even value. if multiple nodes with the same smallest even value are found return the node that has smallest"]
["\", \" eeff \" ) = > false cycpattern _ check ( \" himenss \", \" simen \" ) = > true \" \" \" def circular _ shift ( x, shift ) : \" \" \" circular shift the digits of the integer x, shift the digits right by shift and return"]
["and not a multiple of 3. the function will not change the entries in the list whose indexes are not a multiple of 3 or 4. the function shall then return the sum of all entries. examples : for lst = [ 1, 2, 3 ] the output should be 6 for lst = [ ]"]
["def encode _ cyclic ( s : str ) : \" \" \" returns encoded string by cycling groups of three characters. \" \" \" # split string to groups. each of length 3. groups = [ s [ ( 3 * i ) : min ( ( 3 * i + 3 ), len ( s )"]
["true if there are three distinct elements in the list that sum to zero, and false otherwise. > > > triples _ sum _ to _ zero ( [ 1, 3, 5, 0 ] ) false > > > triples _ sum _ to _ zero ( [ 1, 3, - 2, 1 ]"]
[": list [ any ] ) - > list [ int ] : \" \" \" filter given list of any python values only for integers > > > filter _ integers ( ['a ', 3. 14, 5 ] ) [ 5 ] > > > filter _ integers ( [ 1, 2, 3,'abc"]
["= decimal 11 ), d ( = decimal 13 ). note : you may assume the input is always correct or empty string, and symbols a, b, c, d, e, f are always uppercase. examples : for num = \" ab \" the output should be 1. for num = \""]
["> correct _ bracketing ( \" < > \" ) true > > > correct _ bracketing ( \" < < > < > > \" ) true > > > correct _ bracketing ( \" > < < > \" ) false \" \" \" def prod _ signs ( arr ) : \" \" \" you are"]
["on the cells of the grid. you have to find the minimum path of length k in the grid. you can start from any cell, and in each step you can move to any of the neighbor cells, in other words, you can go to cells which share an edge with you current cell. please note that a"]
["sum _ to _ n ( n : int ) : \" \" \" sum _ to _ n is a function that sums numbers from 1 to n. > > > sum _ to _ n ( 30 ) 465 > > > sum _ to _ n ( 100 ) 5050 > > > sum _ to _ n"]
["algebra operations, and the second list is a list of integers. use the two given lists to build the algebric expression and return the evaluation of this expression. the basic algebra operations : addition ( + ) subtraction ( - ) multiplication ( * ) floor division ( / / ) exponentiation ( *"]
["\" input are two strings a and b consisting only of 1s and 0s. perform binary xor on these inputs and return result also as a string. > > > string _ xor ('010 ','110')'100'\" \" \" def get _ row ( lst, x"]
["nums ) : \" \" \" given an array of integers nums, find the minimum sum of any non - empty sub - array of nums. example minsubarraysum ( [ 2, 3, 4, 1, 2, 4 ] ) = = 1 minsubarraysum ( [ - 1"]
[", 2. 0, 3. 0, 4. 0, 5. 0, 2. 0 ] ) ( 2. 0, 2. 0 ) \" \" \" def count _ nums ( arr ) : \" \" \" write a function count _ nums which takes an array of integers and returns the number"]
["('aaaaa')'' > > > remove _ vowels ('aabaa')'b'> > > remove _ vowels ('zbcd')'zbcd'\" \" \" def words _ in _ sentence ( sentence ) : \" \" \" you are given a string representing"]
[": \" \" \" create a function that takes integers, floats, or strings representing real numbers, and returns the larger variable in its given variable type. return none if the values are equal. note : if a real number is represented as a string, the floating point might be. or, compare _ one ( 1,"]
[") : \" \" \" you are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. given lst, and integer x, find integers x in the list, and return list of tuples, [ ("]
[", b ) : \" \" \" you are given 2 words. you need to return true if the second word or any of its rotations is a substring in the first word cycpattern _ check ( \" abcd \", \" abd \" ) = > false cycpattern _ check ( \""]
["' s balanced. will _ it _ fly ( [ 3 ], 5 ) [UNK] true # 3 is less than the maximum possible weight, and it's balanced.'''def skjkasdkd ( lst ) : \" \" \" you are given a list of integers. you need to find"]
["> correct _ bracketing ( \" < > \" ) true > > > correct _ bracketing ( \" < < > < > > \" ) true > > > correct _ bracketing ( \" > < < > \" ) false \" \" \" def prod _ signs ( arr ) : \" \" \" you are"]
["true > > > is _ palindrome ('aaaaa') true > > > is _ palindrome ('zbcd') false \" \" \" from typing import list def string _ xor ( a : str, b : str ) - > str : \" \""]
[") = = > ( \" saturn \", \" uranus \" ) bf ( \" earth \", \" mercury \" ) = = > ( \" venus \" ) bf ( \" mercury \", \" uranus \" ) = = > ( \" venus \", \" earth \", \" mars \", \" jupiter \", \""]
["def search ( lst ) :'''you are given a non - empty list of positive integers. return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. the frequency of an integer is the number of times it appears in the list."]
["exactly 4 positive even numbers example is _ equal _ to _ sum _ even ( 4 ) = = false is _ equal _ to _ sum _ even ( 6 ) = = false is _ equal _ to _ sum _ even ( 8 ) = = true \" \" \" def get _ positive ( l : list ) :"]
["is _ bored ( \" the sky is blue. the sun is shining. i love this weather \" ) 1 \" \" \" def find _ max ( words ) : \" \" \" write a function that accepts a list of strings. the list contains different words. return the word with maximum number of unique characters. if multiple"]
[", 0, 3, 0, 4, 2 ] output : [ 0, 1 ] explanation : 0 is the smallest value, but there are two zeros, so we will choose the first zero, which has the smallest index. constraints : * 1 < = nodes. length < = 10000 * 0 < ="]
["of the odd digits. return 0 if all digits are even. for example : digits ( 1 ) = = 1 digits ( 4 ) = = 0 digits ( 235 ) = = 15 \" \" \" def triangle _ area ( a, b, c ) :'''given the lengths of the three sides of a"]
["is _ bored ( \" the sky is blue. the sun is shining. i love this weather \" ) 1 \" \" \" def find _ max ( words ) : \" \" \" write a function that accepts a list of strings. the list contains different words. return the word with maximum number of unique characters. if multiple"]
["3, 5, 7, 8, 10, 12. and the number of days is not less than 1 or higher than 30 days for months 4, 6, 9, 11. and, the number of days is not less than 1 or higher than 29 for the month 2. 3. the months should not be"]
["positive integers that start or end with 1. \" \" \" from typing import list def parse _ nested _ parens ( paren _ string : str ) - > list [ int ] : \" \" \" input to this function is a string represented multiple groups for nested parentheses separated by spaces. for each"]
["call them lst _ a and lst _ b ), lst _ a is lexicographically less than lst _ b, in other words, there exist an integer index i ( 1 < = i < = k ) such that lst _ a [ i ] < lst _ b [ i"]
["( 4 ) 288 the function will receive an integer as input and should return the special factorial of this integer. \" \" \" from typing import list def remove _ duplicates ( numbers : list [ int ] ) - > list [ int ] : \" \" \" from a list of integers, remove all elements that occur"]
["smallest even value, and 2 has the smallest index. example 2 : input : [ 1, 2, 3 ] output : [ 2, 1 ] explanation : 2 has the smallest even value, and 2 has the smallest index. example 3 : input : [ ] output : [ ] example 4 : input : [ 5"]
[", 0, 3, 0, 4, 2 ] output : [ 0, 1 ] explanation : 0 is the smallest value, but there are two zeros, so we will choose the first zero, which has the smallest index. constraints : * 1 < = nodes. length < = 10000 * 0 < ="]
["insert a number'delimeter'between every two consecutive elements of input list ` numbers'> > > intersperse ( [ ], 4 ) [ ] > > > intersperse ( [ 1, 2, 3 ], 4 ) [ 1, 4, 2, 4, 3 ] \" \" \" import"]
["( [ 5, 5, 5, 5 ] ) = = [ 5, 5, 5, 5 ] strange _ sort _ list ( [ ] ) = = [ ]'''def sort _ third ( l : list ) : \" \" \" this function takes a list l and returns a list l'such"]
["n is a prime number and should return the value of y otherwise. examples : for x _ or _ y ( 7, 34, 12 ) = = 34 for x _ or _ y ( 15, 8, 5 ) = = 5 \" \" \" def solution ( lst ) : \" \" \" given a non"]
["2, 3 ) 5 > > > add ( 5, 7 ) 12 \" \" \" def prime _ length ( string ) : \" \" \" write a function that takes a string and returns true if the string length is a prime number or false otherwise examples prime _ length ('hello') = = true prime _"]
["\" \" \" def can _ arrange ( arr ) : \" \" \" create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. if no such element exists then return - 1. the given array will not contain duplicate values. examples : can _ arrange"]
["into a single string > > > concatenate ( [ ] )'' > > > concatenate ( ['a ','b ','c'] )'abc'\" \" \" def fizz _ buzz ( n : int ) : \" \" \" return the number of times the digit"]
[", calculate mean absolute deviation around the mean of this dataset. mean absolute deviation is the average absolute difference between each element and a centerpoint ( mean in this case ) : mad = average | x - x _ mean | > > > mean _ absolute _ deviation ( [ 1. 0, 2. 0, 3"]
["\" \" task we are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c then check if the result string is palindrome. a string is called palindrome if it reads the same backward as forward. you should return a tuple"]
["poly ( x ) = 0. find _ zero returns only only zero point, even if there are many. moreover, find _ zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution. > > > round ( find _ zero ( [ 1, 2 ] ),"]
["the largest prime value and return the sum of its digits. examples : for lst = [ 0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3 ] the"]
["( [ - 1, 11, - 11 ] ) = = 1 > > > count _ nums ( [ 1, 1, 2 ] ) = = 3 \" \" \" def do _ algebra ( operator, operand ) : \" \" \" given two lists operator, and operand. the first list has basic"]
["', return its md5 hash equivalent string. if'text'is an empty string, return none. > > > string _ to _ md5 ('hello world') = ='3e25960a79dbc69b674cd4ec67a72"]
[". a string s is considered to be good if and only if all parentheses in s are balanced. for example : the string'( ( ) ) ( )'is good, while the string'( ) )'is not. return'yes'if there's a way to make a good string, and"]
["false \" \" \" def same _ chars ( s0 : str, s1 : str ) : \" \" \" check if two words have the same characters. > > > same _ chars ('eabcdzzzz ','dddzzzzzzzddeddabc') true"]
["7, 1, 5, 9, 653, 121 ] ) [ 1, 5, 653 ] > > > common ( [ 5, 3, 2, 8 ], [ 3, 2 ] ) [ 2, 3 ] \" \" \" def valid _ date ( date ) : \" \" \" you have"]
["return the sum of squares of the numbers in the list that are odd. ignore numbers that are negative or not integers. double _ the _ difference ( [ 1, 3, 2, 0 ] ) = = 1 + 9 + 0 + 0 = 10 double _ the _ difference ( [ - 1, - 2,"]
[", 0, - 2 ] ) - > [ 4, 4, 1, 0, 0, 6 ] \" \" \" def is _ simple _ power ( x, n ) : \" \" \" your task is to write a function that returns true if a number x is a simple power of n and false in other"]
